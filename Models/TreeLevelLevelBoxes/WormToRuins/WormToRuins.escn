[gd_scene load_steps=1 format=2]

[ext_resource id=1 path="TestingMaterial.png.001.png" type="Texture"]

[ext_resource id=2 path="TestingMaterialMono.png" type="Texture"]

[sub_resource id=1 type="ConcavePolygonShape"]

resource_name = "Cube012"
data = PoolVector3Array(1.0, 7.0, 1.0, 1.0, 0.0, 1.0, 1.0, 7.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -4.0, -1.0, 0.0, -1.0, -1.0, 0.0, 1.0, -1.0, 7.0, 1.0, -1.0, 0.0, -1.0, 1.0, -2.0, 1.0, -1.0, -2.0, 1.0, 1.0, -2.0, -1.0, 1.0, 0.0, 1.0, 1.0, 7.0, 1.0, -1.0, 0.0, 1.0, -1.0, 0.0, -1.0, -1.0, 7.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, 1.0, 1.0, -2.0, 1.0, 1.0, 0.0, -1.0, -1.0, 0.0, -1.0, -1.0, -2.0, -1.0, -1.0, 0.0, 1.0, -1.0, 0.0, 1.0, -1.0, -2.0, 1.0, 1.0, 0.0, 1.0, -1.0, 0.0, -4.0, -4.0, 0.0, -4.0, -1.0, -2.0, -4.0, -1.0, 0.0, -1.0, -1.0, 0.0, -4.0, -1.0, -2.0, -1.0, -1.0, -2.0, -1.0, -1.0, -2.0, -4.0, 1.0, -2.0, -1.0, 1.0, -2.0, -1.0, 1.0, -2.0, -4.0, 1.0, 0.0, -1.0, 1.0, 0.0, -7.0, 1.0, -2.0, -7.0, -1.0, 0.0, -7.0, -1.0, 0.0, -4.0, -1.0, 5.0, -4.0, -4.0, 0.0, -4.0, 1.0, -2.0, -7.0, 4.0, -2.0, -7.0, 1.0, -2.0, -4.0, -1.0, -2.0, -4.0, -1.0, -2.0, -7.0, 1.0, -2.0, -4.0, 4.0, -2.0, -4.0, 4.0, -2.0, -7.0, 4.0, 0.0, -4.0, 1.0, 0.0, -7.0, 4.0, 0.0, -7.0, 1.0, -2.0, -7.0, 1.0, -2.0, -4.0, 4.0, -2.0, -4.0, 1.0, 0.0, -4.0, 1.0, 0.0, -7.0, 1.0, 5.0, -7.0, 4.0, 0.0, -7.0, -4.0, 0.0, -4.0, -4.0, 0.0, -7.0, -4.0, -2.0, -4.0, 1.0, 0.0, -4.0, 1.0, 5.0, -4.0, -1.0, 0.0, -4.0, -1.0, -2.0, -4.0, -4.0, -2.0, -4.0, -1.0, -2.0, -7.0, -1.0, -2.0, -7.0, -4.0, -2.0, -7.0, -1.0, 0.0, -7.0, -1.0, 5.0, -4.0, -1.0, 7.0, -4.0, -1.0, 5.0, -7.0, 1.0, 5.0, -4.0, 4.0, 5.0, -4.0, 1.0, 5.0, -7.0, -1.0, 5.0, -7.0, -4.0, 5.0, -7.0, -1.0, 5.0, -4.0, 4.0, 0.0, -7.0, 4.0, 5.0, -7.0, 4.0, 0.0, -4.0, -4.0, 0.0, -4.0, -4.0, 5.0, -4.0, -4.0, 0.0, -7.0, 4.0, 0.0, -4.0, 4.0, 5.0, -4.0, 1.0, 0.0, -4.0, -4.0, 0.0, -7.0, -4.0, 5.0, -7.0, -1.0, 0.0, -7.0, -1.0, 0.0, -7.0, -1.0, 5.0, -7.0, 1.0, 0.0, -7.0, 1.0, 7.0, -4.0, 1.0, 7.0, -7.0, -1.0, 7.0, -4.0, 1.0, 5.0, -4.0, 1.0, 7.0, -4.0, -1.0, 5.0, -4.0, 1.0, 5.0, -7.0, 1.0, 7.0, -7.0, 1.0, 5.0, -4.0, -1.0, 7.0, -7.0, -1.0, 7.0, -9.0, -1.0, 5.0, -7.0, 1.0, -0.658434, -9.0, 1.0, -2.0, -9.0, 1.0, -0.658434, -11.0, -1.0, 5.0, -7.0, -1.0, 5.0, -9.0, 1.0, 5.0, -7.0, 1.0, 5.0, -7.0, 1.0, 5.0, -9.0, 1.0, 7.0, -7.0, 1.0, 7.0, -7.0, 1.0, 7.0, -9.0, -1.0, 7.0, -7.0, -1.0, 5.0, -11.0, -1.0, 7.0, -11.0, 1.0, 5.0, -11.0, -1.0, 5.0, -9.0, -1.0, 5.0, -11.0, 1.0, 5.0, -9.0, -1.0, 7.0, -9.0, -1.0, 8.0, -9.0, -1.0, 7.0, -11.0, -1.0, 7.0, -9.0, -1.0, 7.0, -11.0, -1.0, 5.0, -9.0, 1.0, -0.658434, -11.0, 1.0, -2.0, -11.0, -1.0, -0.658434, -11.0, -1.0, -0.658434, -11.0, -1.0, -2.0, -11.0, -1.0, -0.658434, -9.0, -1.0, -0.658434, -9.0, -1.0, -2.0, -9.0, 1.0, -0.658434, -9.0, -1.0, 7.0, -11.0, -1.0, 8.0, -11.0, 1.0, 7.0, -11.0, 1.0, 7.0, -11.0, 1.0, 8.0, -11.0, 1.0, 7.0, -9.0, 1.0, 7.0, -9.0, 1.0, 8.0, -9.0, -1.0, 7.0, -9.0, 3.63823, 5.0, -11.0, 3.63823, 1.0727, -11.0, 3.63823, 5.0, -9.0, 3.63823, 7.0, -11.0, 5.13823, 7.0, -11.0, 3.63823, 5.0, -11.0, 1.0, 7.0, -11.0, 3.63823, 7.0, -11.0, 1.0, 5.0, -11.0, 1.0, 5.0, -11.0, 3.63823, 5.0, -11.0, 1.0, 5.0, -9.0, 1.0, 7.0, -9.0, 3.63823, 7.0, -9.0, 1.0, 7.0, -11.0, 1.0, 5.0, -9.0, 3.63823, 5.0, -9.0, 1.0, 7.0, -9.0, 3.63823, 7.0, -9.0, 5.13823, 7.0, -9.0, 3.63823, 7.0, -11.0, 3.63823, 5.0, -9.0, 5.13823, 5.0, -9.0, 3.63823, 7.0, -9.0, 5.13823, 5.0, -11.0, 5.13823, 7.0, -11.0, 5.13823, 5.0, -9.0, 5.13823, 5.0, -11.0, 5.13823, 1.0727, -11.0, 3.63823, 5.0, -11.0, 5.13823, 5.0, -9.0, 5.13823, 1.0727, -9.0, 5.13823, 5.0, -11.0, 3.63823, 5.0, -9.0, 3.63823, 1.0727, -9.0, 5.13823, 5.0, -9.0, 1.0, -0.658434, -11.0, 3.63823, -0.658434, -11.0, 1.0, -0.658434, -9.0, -1.0, -0.658434, -11.0, -1.0, 1.0727, -11.0, 1.0, -0.658434, -11.0, -1.0, -0.658434, -9.0, -1.0, 1.0727, -9.0, -1.0, -0.658434, -11.0, 1.0, -0.658434, -9.0, 1.0, 1.0727, -9.0, -1.0, -0.658434, -9.0, 1.0, 1.0727, -9.0, 1.0, 1.0727, -11.0, -1.0, 1.0727, -9.0, 3.63823, -0.658434, -9.0, 5.13823, -0.658434, -9.0, 3.63823, 1.0727, -9.0, 1.0, -0.658434, -9.0, 3.63823, -0.658434, -9.0, 1.0, 1.0727, -9.0, 1.0, 1.0727, -9.0, 3.63823, 1.0727, -9.0, 1.0, 1.0727, -11.0, 1.0, 1.0727, -11.0, 3.63823, 1.0727, -11.0, 1.0, -0.658434, -11.0, 5.13823, -0.658434, -11.0, 5.13823, 1.0727, -11.0, 5.13823, -0.658434, -9.0, 3.63823, 1.0727, -11.0, 5.13823, 1.0727, -11.0, 3.63823, -0.658434, -11.0, 3.63823, -0.658434, -11.0, 5.13823, -0.658434, -11.0, 3.63823, -0.658434, -9.0, 1.0, 0.0, 1.0, 1.0, 0.0, -1.0, 1.0, 7.0, -1.0, 1.0, 0.0, -4.0, -1.0, 0.0, -4.0, -1.0, 0.0, -1.0, -1.0, 7.0, 1.0, -1.0, 7.0, -1.0, -1.0, 0.0, -1.0, -1.0, -2.0, 1.0, -1.0, -2.0, -1.0, 1.0, -2.0, -1.0, 1.0, 7.0, 1.0, -1.0, 7.0, 1.0, -1.0, 0.0, 1.0, -1.0, 7.0, -1.0, 1.0, 7.0, -1.0, 1.0, 0.0, -1.0, 1.0, -2.0, 1.0, 1.0, -2.0, -1.0, 1.0, 0.0, -1.0, -1.0, -2.0, -1.0, -1.0, -2.0, 1.0, -1.0, 0.0, 1.0, -1.0, -2.0, 1.0, 1.0, -2.0, 1.0, 1.0, 0.0, 1.0, -4.0, 0.0, -4.0, -4.0, -2.0, -4.0, -1.0, -2.0, -4.0, -1.0, 0.0, -4.0, -1.0, -2.0, -4.0, -1.0, -2.0, -1.0, -1.0, -2.0, -4.0, 1.0, -2.0, -4.0, 1.0, -2.0, -1.0, 1.0, -2.0, -4.0, 1.0, 0.0, -4.0, 1.0, 0.0, -1.0, 1.0, -2.0, -7.0, -1.0, -2.0, -7.0, -1.0, 0.0, -7.0, -1.0, 5.0, -4.0, -4.0, 5.0, -4.0, -4.0, 0.0, -4.0, 4.0, -2.0, -7.0, 4.0, -2.0, -4.0, 1.0, -2.0, -4.0, -1.0, -2.0, -7.0, 1.0, -2.0, -7.0, 1.0, -2.0, -4.0, 4.0, -2.0, -7.0, 4.0, 0.0, -7.0, 4.0, 0.0, -4.0, 4.0, 0.0, -7.0, 4.0, -2.0, -7.0, 1.0, -2.0, -7.0, 4.0, -2.0, -4.0, 4.0, 0.0, -4.0, 1.0, 0.0, -4.0, 1.0, 5.0, -7.0, 4.0, 5.0, -7.0, 4.0, 0.0, -7.0, -4.0, 0.0, -7.0, -4.0, -2.0, -7.0, -4.0, -2.0, -4.0, 1.0, 5.0, -4.0, -1.0, 5.0, -4.0, -1.0, 0.0, -4.0, -4.0, -2.0, -4.0, -4.0, -2.0, -7.0, -1.0, -2.0, -7.0, -4.0, -2.0, -7.0, -4.0, 0.0, -7.0, -1.0, 0.0, -7.0, -1.0, 7.0, -4.0, -1.0, 7.0, -7.0, -1.0, 5.0, -7.0, 4.0, 5.0, -4.0, 4.0, 5.0, -7.0, 1.0, 5.0, -7.0, -4.0, 5.0, -7.0, -4.0, 5.0, -4.0, -1.0, 5.0, -4.0, 4.0, 5.0, -7.0, 4.0, 5.0, -4.0, 4.0, 0.0, -4.0, -4.0, 5.0, -4.0, -4.0, 5.0, -7.0, -4.0, 0.0, -7.0, 4.0, 5.0, -4.0, 1.0, 5.0, -4.0, 1.0, 0.0, -4.0, -4.0, 5.0, -7.0, -1.0, 5.0, -7.0, -1.0, 0.0, -7.0, -1.0, 5.0, -7.0, 1.0, 5.0, -7.0, 1.0, 0.0, -7.0, 1.0, 7.0, -7.0, -1.0, 7.0, -7.0, -1.0, 7.0, -4.0, 1.0, 7.0, -4.0, -1.0, 7.0, -4.0, -1.0, 5.0, -4.0, 1.0, 7.0, -7.0, 1.0, 7.0, -4.0, 1.0, 5.0, -4.0, -1.0, 7.0, -9.0, -1.0, 5.0, -9.0, -1.0, 5.0, -7.0, 1.0, -2.0, -9.0, 1.0, -2.0, -11.0, 1.0, -0.658434, -11.0, -1.0, 5.0, -9.0, 1.0, 5.0, -9.0, 1.0, 5.0, -7.0, 1.0, 5.0, -9.0, 1.0, 7.0, -9.0, 1.0, 7.0, -7.0, 1.0, 7.0, -9.0, -1.0, 7.0, -9.0, -1.0, 7.0, -7.0, -1.0, 7.0, -11.0, 1.0, 7.0, -11.0, 1.0, 5.0, -11.0, -1.0, 5.0, -11.0, 1.0, 5.0, -11.0, 1.0, 5.0, -9.0, -1.0, 8.0, -9.0, -1.0, 8.0, -11.0, -1.0, 7.0, -11.0, -1.0, 7.0, -11.0, -1.0, 5.0, -11.0, -1.0, 5.0, -9.0, 1.0, -2.0, -11.0, -1.0, -2.0, -11.0, -1.0, -0.658434, -11.0, -1.0, -2.0, -11.0, -1.0, -2.0, -9.0, -1.0, -0.658434, -9.0, -1.0, -2.0, -9.0, 1.0, -2.0, -9.0, 1.0, -0.658434, -9.0, -1.0, 8.0, -11.0, 1.0, 8.0, -11.0, 1.0, 7.0, -11.0, 1.0, 8.0, -11.0, 1.0, 8.0, -9.0, 1.0, 7.0, -9.0, 1.0, 8.0, -9.0, -1.0, 8.0, -9.0, -1.0, 7.0, -9.0, 3.63823, 1.0727, -11.0, 3.63823, 1.0727, -9.0, 3.63823, 5.0, -9.0, 5.13823, 7.0, -11.0, 5.13823, 5.0, -11.0, 3.63823, 5.0, -11.0, 3.63823, 7.0, -11.0, 3.63823, 5.0, -11.0, 1.0, 5.0, -11.0, 3.63823, 5.0, -11.0, 3.63823, 5.0, -9.0, 1.0, 5.0, -9.0, 3.63823, 7.0, -9.0, 3.63823, 7.0, -11.0, 1.0, 7.0, -11.0, 3.63823, 5.0, -9.0, 3.63823, 7.0, -9.0, 1.0, 7.0, -9.0, 5.13823, 7.0, -9.0, 5.13823, 7.0, -11.0, 3.63823, 7.0, -11.0, 5.13823, 5.0, -9.0, 5.13823, 7.0, -9.0, 3.63823, 7.0, -9.0, 5.13823, 7.0, -11.0, 5.13823, 7.0, -9.0, 5.13823, 5.0, -9.0, 5.13823, 1.0727, -11.0, 3.63823, 1.0727, -11.0, 3.63823, 5.0, -11.0, 5.13823, 1.0727, -9.0, 5.13823, 1.0727, -11.0, 5.13823, 5.0, -11.0, 3.63823, 1.0727, -9.0, 5.13823, 1.0727, -9.0, 5.13823, 5.0, -9.0, 3.63823, -0.658434, -11.0, 3.63823, -0.658434, -9.0, 1.0, -0.658434, -9.0, -1.0, 1.0727, -11.0, 1.0, 1.0727, -11.0, 1.0, -0.658434, -11.0, -1.0, 1.0727, -9.0, -1.0, 1.0727, -11.0, -1.0, -0.658434, -11.0, 1.0, 1.0727, -9.0, -1.0, 1.0727, -9.0, -1.0, -0.658434, -9.0, 1.0, 1.0727, -11.0, -1.0, 1.0727, -11.0, -1.0, 1.0727, -9.0, 5.13823, -0.658434, -9.0, 5.13823, 1.0727, -9.0, 3.63823, 1.0727, -9.0, 3.63823, -0.658434, -9.0, 3.63823, 1.0727, -9.0, 1.0, 1.0727, -9.0, 3.63823, 1.0727, -9.0, 3.63823, 1.0727, -11.0, 1.0, 1.0727, -11.0, 3.63823, 1.0727, -11.0, 3.63823, -0.658434, -11.0, 1.0, -0.658434, -11.0, 5.13823, 1.0727, -11.0, 5.13823, 1.0727, -9.0, 5.13823, -0.658434, -9.0, 5.13823, 1.0727, -11.0, 5.13823, -0.658434, -11.0, 3.63823, -0.658434, -11.0, 5.13823, -0.658434, -11.0, 5.13823, -0.658434, -9.0, 3.63823, -0.658434, -9.0)

[sub_resource id=2 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0;
uniform sampler2D texture_1;


void dir_space_convert_world_to_view(inout vec3 dir, in mat4 view_mat) {
    dir = normalize(view_mat * vec4(dir, 0.0)).xyz;
}


void euler_angle_XYZ_to_mat4(in vec3 rot, out mat4 rot_mat) {
    mat3 rx = mat3(vec3(1, 0, 0),
                   vec3(0, cos(rot.x), sin(rot.x)),
                   vec3(0, -sin(rot.x), cos(rot.x)));
    mat3 ry = mat3(vec3(cos(rot.y), 0, -sin(rot.y)),
                   vec3(0, 1, 0),
                   vec3(sin(rot.y), 0, cos(rot.y)));
    mat3 rz = mat3(vec3(cos(rot.z), sin(rot.z), 0),
                   vec3(-sin(rot.z), cos(rot.z), 0),
                   vec3(0, 0, 1));
    rot_mat = mat4(rz * ry * rx);
}


void location_to_mat4(in vec3 loc, out mat4 loc_mat) {
    loc_mat = mat4(vec4(1.0, 0.0, 0.0, 0),
                   vec4(0.0, 1.0, 0.0, 0),
                   vec4(0.0, 0.0, 1.0, 0),
                   vec4(loc, 1.0));
}


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}


void point_space_convert_view_to_model(inout vec3 pos,
        in mat4 inv_model_mat, in mat4 inv_view_mat) {
    pos = (inv_model_mat * (inv_view_mat * vec4(pos, 1.0))).xyz;
}


void scale_to_mat4(in vec3 scale, out mat4 scale_mat) {
    scale_mat = mat4(vec4(scale.x, 0.0, 0.0, 0.0),
                     vec4(0.0, scale.y, 0.0, 0.0),
                     vec4(0.0, 0.0, scale.z, 0.0),
                     vec4(0.0, 0.0, 0.0, 1.0));
}


void space_convert_yup_to_zup(inout vec3 dir) {
    dir = mat3(vec3(1, 0, 0), vec3(0, 0, 1), vec3(0, -1, 0)) * dir;
}


void space_convert_zup_to_yup(inout vec3 dir) {
    dir = mat3(vec3(1, 0, 0), vec3(0, 0, -1), vec3(0, 1, 0)) * dir;
}

void vertex () {
}

void fragment () {
	mat4 INV_MODEL_MAT = inverse(WORLD_MATRIX);
	mat4 INV_VIEW_MAT = inverse(INV_CAMERA_MATRIX);
	
	// node: 'Texture Coordinate'
	// type: 'ShaderNodeTexCoord'
	// input sockets handling
	// output sockets definitions
	vec3 node0_out0_object;
	
	node0_out0_object = VERTEX;
	point_space_convert_view_to_model(node0_out0_object, INV_MODEL_MAT,
		INV_VIEW_MAT);
	space_convert_yup_to_zup(node0_out0_object);
	
	
	// node: 'Mapping'
	// type: 'ShaderNodeMapping'
	// input sockets handling
	vec3 node1_in0_vector = node0_out0_object;
	vec3 node1_in1_location = vec3(0.0, 0.0, 0.0);
	vec3 node1_in2_rotation = vec3(0.0, 0.0, 0.0);
	vec3 node1_in3_scale = vec3(1.0, 1.0, 1.0);
	// output sockets definitions
	vec3 node1_out0_vector;
	
	// Mapping type: POINT
	mat4 node1_var0_location;
	location_to_mat4(node1_in1_location, node1_var0_location);
	mat4 node1_var1_rotation;
	euler_angle_XYZ_to_mat4(node1_in2_rotation, node1_var1_rotation);
	mat4 node1_var2_scale;
	scale_to_mat4(node1_in3_scale, node1_var2_scale);
	mat4 node1_var3_xform_mat = node1_var0_location * node1_var1_rotation *
		node1_var2_scale;
	node1_out0_vector = (node1_var3_xform_mat * vec4(node1_in0_vector, 1.0)).xyz;
	
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node2_in0_vector = node1_out0_vector;
	// output sockets definitions
	vec4 node2_out0_color;
	float node2_out1_alpha;
	
	node_tex_image(node2_in0_vector, texture_0, node2_out0_color, node2_out1_alpha);
	
	
	// node: 'Image Texture.001'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node3_in0_vector = node1_out0_vector;
	// output sockets definitions
	vec4 node3_out0_color;
	float node3_out1_alpha;
	
	node_tex_image(node3_in0_vector, texture_1, node3_out0_color, node3_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node4_in0_basecolor = node2_out0_color;
	float node4_in1_subsurface = float(0.0);
	vec3 node4_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node4_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node4_in4_metallic = float(1.0);
	float node4_in5_specular = float(1.0);
	float node4_in6_speculartint = float(0.0);
	float node4_in7_roughness = float(1.0);
	float node4_in8_anisotropic = float(0.0);
	float node4_in9_anisotropicrotation = float(0.0);
	float node4_in10_sheen = float(0.0);
	float node4_in11_sheentint = float(0.5);
	float node4_in12_clearcoat = float(0.0);
	float node4_in13_clearcoatroughness = float(0.0);
	float node4_in14_ior = float(1.4500000476837158);
	float node4_in15_transmission = float(0.0);
	float node4_in16_transmissionroughness = float(0.0);
	vec4 node4_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node4_in18_alpha = float(1.0);
	vec3 node4_in19_normal = node3_out0_color.rgb;
	vec3 node4_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node4_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node4_bsdf_out0_albedo;
	float node4_bsdf_out1_sss_strength;
	float node4_bsdf_out3_specular;
	float node4_bsdf_out2_metallic;
	float node4_bsdf_out4_roughness;
	float node4_bsdf_out5_clearcoat;
	float node4_bsdf_out6_clearcoat_gloss;
	float node4_bsdf_out7_anisotropy;
	float node4_bsdf_out8_transmission;
	float node4_bsdf_out9_ior;
	
	node_bsdf_principled(node4_in0_basecolor, node4_in1_subsurface,
		node4_in3_subsurfacecolor, node4_in4_metallic, node4_in5_specular,
		node4_in7_roughness, node4_in12_clearcoat, node4_in13_clearcoatroughness,
		node4_in8_anisotropic, node4_in15_transmission, node4_in14_ior,
		node4_bsdf_out0_albedo, node4_bsdf_out1_sss_strength, node4_bsdf_out2_metallic,
		node4_bsdf_out3_specular, node4_bsdf_out4_roughness, node4_bsdf_out5_clearcoat,
		node4_bsdf_out6_clearcoat_gloss, node4_bsdf_out7_anisotropy,
		node4_bsdf_out8_transmission, node4_bsdf_out9_ior);
	space_convert_zup_to_yup(node4_in19_normal);
	dir_space_convert_world_to_view(node4_in19_normal, INV_CAMERA_MATRIX);
	
	
	ALBEDO = node4_bsdf_out0_albedo;
	SSS_STRENGTH = node4_bsdf_out1_sss_strength;
	SPECULAR = node4_bsdf_out3_specular;
	METALLIC = node4_bsdf_out2_metallic;
	ROUGHNESS = node4_bsdf_out4_roughness;
	CLEARCOAT = node4_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node4_bsdf_out6_clearcoat_gloss;
	NORMAL = node4_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node4_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node4_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node4_bsdf_out7_anisotropy;
}
"

[sub_resource id=3 type="ShaderMaterial"]

resource_name = "NewPlaceHolder"
shader = SubResource(2)
shader_param/texture_0 = ExtResource(1)
shader_param/texture_1 = ExtResource(2)

[sub_resource id=4 type="ArrayMesh"]

resource_name = "Cube012"
surfaces/0 = {
	"material":SubResource(3),
	"primitive":4,
	"arrays":[
		Vector3Array(1.0, -1.0, -7.0, 1.0, 1.0, 0.0, 1.0, 1.0, -7.0, -1.0, -1.0, 0.0, 1.0, -4.0, 0.0, 1.0, -1.0, 0.0, -1.0, -1.0, 0.0, -1.0, 1.0, -7.0, -1.0, 1.0, 0.0, 1.0, -1.0, 2.0, -1.0, 1.0, 2.0, 1.0, 1.0, 2.0, -1.0, 1.0, 0.0, 1.0, 1.0, -7.0, 1.0, 1.0, 0.0, 1.0, -1.0, 0.0, -1.0, -1.0, -7.0, -1.0, -1.0, 0.0, 1.0, -1.0, 0.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, -1.0, 2.0, -1.0, -1.0, 0.0, 1.0, 1.0, 0.0, -1.0, 1.0, 2.0, -1.0, 1.0, 0.0, -1.0, -4.0, 2.0, -4.0, -4.0, 0.0, -1.0, -4.0, 0.0, -1.0, -1.0, 2.0, -1.0, -4.0, 0.0, -1.0, -1.0, 0.0, 1.0, -1.0, 2.0, -1.0, -4.0, 2.0, -1.0, -1.0, 2.0, 1.0, -1.0, 0.0, 1.0, -4.0, 2.0, 1.0, -1.0, 2.0, -1.0, -7.0, 0.0, 1.0, -7.0, 2.0, 1.0, -7.0, 0.0, -1.0, -4.0, -5.0, 1.0, -4.0, 2.0, 4.0, -7.0, 2.0, 1.0, -7.0, 2.0, -1.0, -7.0, 2.0, 4.0, -4.0, 0.0, 4.0, -7.0, 2.0, 4.0, -4.0, 2.0, 4.0, -7.0, 0.0, 1.0, -4.0, 0.0, 4.0, -4.0, 2.0, 1.0, -4.0, 2.0, 1.0, -7.0, -5.0, -4.0, -4.0, 2.0, -4.0, -7.0, 0.0, -4.0, -4.0, 0.0, 1.0, -4.0, -5.0, 1.0, -4.0, 0.0, -4.0, -4.0, 2.0, -4.0, -7.0, 2.0, -1.0, -7.0, 2.0, -1.0, -7.0, -5.0, -1.0, -4.0, -7.0, -1.0, -4.0, -5.0, 1.0, -7.0, -5.0, 4.0, -4.0, -5.0, 1.0, -4.0, -5.0, -1.0, -4.0, -5.0, -4.0, -7.0, -5.0, -1.0, -7.0, -5.0, 4.0, -4.0, 0.0, 4.0, -7.0, -5.0, 4.0, -7.0, 0.0, -4.0, -4.0, -5.0, 1.0, -4.0, 0.0, 4.0, -4.0, -5.0, 4.0, -4.0, 0.0, -4.0, -7.0, -5.0, -4.0, -7.0, 0.0, -1.0, -7.0, -5.0, -1.0, -4.0, -7.0, 1.0, -7.0, -7.0, 1.0, -4.0, -7.0, 1.0, -4.0, -7.0, 1.0, -4.0, -5.0, 1.0, -7.0, -7.0, 1.0, -7.0, -5.0, -1.0, -9.0, -7.0, -1.0, -7.0, -7.0, 1.0, -11.0, 0.658434, 1.0, -9.0, 2.0, 1.0, -9.0, 0.658434, 1.0, -7.0, -5.0, -1.0, -9.0, -5.0, -1.0, -7.0, -5.0, 1.0, -9.0, -5.0, -1.0, -7.0, -7.0, 1.0, -9.0, -7.0, 1.0, -11.0, -5.0, -1.0, -11.0, -7.0, -1.0, -11.0, -5.0, 1.0, -9.0, -5.0, -1.0, -11.0, -5.0, -1.0, -9.0, -5.0, -1.0, -11.0, -7.0, -1.0, -9.0, -8.0, -1.0, -9.0, -5.0, -1.0, -11.0, 0.658434, 1.0, -11.0, 2.0, 1.0, -11.0, 0.658434, -1.0, -9.0, 0.658434, -1.0, -11.0, 2.0, -1.0, -11.0, 0.658434, 1.0, -9.0, 0.658434, -1.0, -9.0, 2.0, -1.0, -9.0, 0.658434, 1.0, -11.0, -7.0, -1.0, -11.0, -8.0, 1.0, -9.0, -7.0, 1.0, -11.0, -8.0, 1.0, -11.0, -7.0, -1.0, -9.0, -7.0, 1.0, -9.0, -8.0, 1.0, -9.0, -7.0, 3.63823, -9.0, -5.0, 3.63823, -11.0, -1.0727, 3.63823, -11.0, -5.0, 3.63823, -11.0, -5.0, 5.13823, -11.0, -7.0, 3.63823, -11.0, -7.0, 3.63823, -11.0, -5.0, 1.0, -11.0, -5.0, 1.0, -11.0, -7.0, 3.63823, -9.0, -7.0, 1.0, -9.0, -7.0, 1.0, -9.0, -7.0, 3.63823, -9.0, -5.0, 1.0, -9.0, -5.0, 3.63823, -11.0, -7.0, 5.13823, -9.0, -7.0, 3.63823, -9.0, -7.0, 5.13823, -9.0, -5.0, 5.13823, -9.0, -5.0, 5.13823, -11.0, -7.0, 5.13823, -11.0, -5.0, 5.13823, -11.0, -1.0727, 5.13823, -11.0, -5.0, 5.13823, -9.0, -1.0727, 3.63823, -9.0, -1.0727, 1.0, -9.0, 0.658434, 3.63823, -11.0, 0.658434, 1.0, -11.0, 0.658434, -1.0, -11.0, -1.0727, -1.0, -9.0, -1.0727, 1.0, -9.0, -1.0727, -1.0, -9.0, -1.0727, 1.0, -11.0, -1.0727, 1.0, -9.0, -1.0727, 3.63823, -9.0, -1.0727, 5.13823, -9.0, 0.658434, 3.63823, -9.0, 0.658434, 1.0, -11.0, -1.0727, 3.63823, -9.0, -1.0727, 1.0, -9.0, -1.0727, 3.63823, -11.0, -1.0727, 1.0, -11.0, -1.0727, 5.13823, -9.0, 0.658434, 5.13823, -11.0, -1.0727, 5.13823, -11.0, 0.658434, 3.63823, -11.0, 0.658434, 5.13823, -11.0, -1.0727, 3.63823, -9.0, 0.658434, 5.13823, -11.0, 0.658434, 3.63823, -11.0, 0.658434, 1.0, -1.0, 0.0, -1.0, -4.0, 0.0, -1.0, -1.0, -7.0, -1.0, -1.0, 2.0, -1.0, 1.0, -7.0, 1.0, -1.0, -7.0, 1.0, -1.0, 2.0, -1.0, 1.0, 2.0, 1.0, 1.0, 2.0, -4.0, -4.0, 2.0, -1.0, -4.0, 2.0, 1.0, -4.0, 0.0, -4.0, -4.0, -5.0, 4.0, -4.0, 2.0, 4.0, -7.0, 0.0, 4.0, -7.0, 2.0, 4.0, -4.0, 0.0, 4.0, -7.0, -5.0, -4.0, -7.0, 2.0, -4.0, -7.0, 2.0, 4.0, -7.0, -5.0, -4.0, -4.0, -5.0, 4.0, -4.0, -5.0, -4.0, -7.0, -5.0, 1.0, -4.0, -5.0, -1.0, -4.0, -7.0, 1.0, -4.0, -7.0, 1.0, -11.0, 2.0, 1.0, -9.0, -5.0, -1.0, -9.0, -7.0, -1.0, -11.0, -8.0, -1.0, -11.0, -5.0, -1.0, -11.0, 2.0, -1.0, -9.0, 2.0, 1.0, -9.0, 2.0, 1.0, -11.0, -8.0, 1.0, -9.0, -8.0, -1.0, -9.0, -8.0, 3.63823, -9.0, -1.0727, 1.0, -9.0, -5.0, 3.63823, -9.0, -5.0, 3.63823, -11.0, -5.0, 1.0, -11.0, -7.0, 3.63823, -11.0, -7.0, 3.63823, -9.0, -7.0, 5.13823, -11.0, -7.0, 5.13823, -9.0, -7.0, 5.13823, -9.0, -7.0, 3.63823, -11.0, -5.0, 3.63823, -11.0, -1.0727, 5.13823, -11.0, -1.0727, 5.13823, -11.0, -1.0727, 5.13823, -9.0, -1.0727, 1.0, -9.0, 0.658434, 3.63823, -9.0, 0.658434, 3.63823, -11.0, 0.658434, -1.0, -11.0, -1.0727, -1.0, -9.0, 0.658434, -1.0, -9.0, -1.0727, 1.0, -9.0, -1.0727, -1.0, -9.0, -1.0727, -1.0, -11.0, -1.0727, 1.0, -11.0, -1.0727, 5.13823, -9.0, -1.0727, 1.0, -11.0, -1.0727, 3.63823, -11.0, -1.0727, 3.63823, -9.0, -1.0727, 5.13823, -9.0, -1.0727, 5.13823, -11.0, 0.658434, 3.63823, -9.0, 0.658434, 5.13823, -9.0, 0.658434, 5.13823, -11.0, 0.658434),
		Vector3Array(-1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -2.25927e-07, -1.0, 0.0, -2.25927e-07, -1.0, 0.0, -2.25927e-07, -1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 2.38419e-07, 2.38419e-07, 1.0, 2.38419e-07, 2.38419e-07, 1.0, 2.38419e-07, 2.38419e-07, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 2.71112e-07, 1.0, 0.0, 2.71112e-07, 1.0, 0.0, 2.71112e-07, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -2.38418e-07, -1.0, 0.0, -2.38418e-07, -1.0, 0.0, -2.38418e-07, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -2.71112e-07, -1.0, 0.0, -2.71112e-07, -1.0, 0.0, -2.71112e-07, -1.0, 1.0, 0.0, 0.0, 2.75448e-07, -1.0, 0.0, 2.75448e-07, -1.0, 0.0, 2.75448e-07, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, 1.80741e-07, 1.0, 0.0, 1.80741e-07, 1.0, 0.0, 1.80741e-07, 1.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, -2.38419e-07, -1.0, 0.0, -2.38419e-07, -1.0, 0.0, -2.38419e-07, -1.0),
		FloatArray(0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, -1.0, -5.22097e-07, 0.0, 1.0, -1.0, -3.12369e-07, 0.0, 1.0, -1.0, -8.34465e-07, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.74032e-07, 1.0, 1.0, 0.0, 2.19848e-07, 1.0, 1.0, 0.0, 2.38131e-07, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, -2.61048e-07, 0.0, 1.0, 1.0, -2.37498e-07, 0.0, 1.0, 1.0, -4.17233e-07, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.23639e-07, 0.0, 1.0, 1.0, 1.6957e-07, 0.0, 1.0, 1.0, 2.36432e-07, 0.0, 1.0, 1.0, 1.0, 0.0, 1.2921e-07, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, -2.78155e-07, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 1.58984e-07, 0.0, 1.0, 1.0, 1.0, 0.0, 2.26094e-07, 1.0, 1.0, 0.0, 1.91139e-07, 1.0, 1.0, 0.0, 2.78155e-07, 1.0, 2.27756e-07, 0.0, 1.0, 1.0, 0.0, -1.0, -3.06788e-07, 1.0, 0.0, -1.0, -3.49395e-07, 1.0, 0.0, -1.0, -3.47694e-07, 1.0, 1.0, 0.0, 2.52674e-08, 1.0, 1.0, 0.0, 2.08616e-07, 1.0, 1.0, -5.5631e-07, 0.0, 1.0, 7.80922e-08, 0.0, 1.0, 1.0, 2.08616e-07, 0.0, 1.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, -1.0, -2.78155e-07, 0.0, 1.0, -1.0, -2.78155e-07, 0.0, 1.0, -1.0, -5.5631e-07, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, -4.84537e-07, 1.0, 1.0, 0.0, 5.4684e-08, 1.0, 1.0, 0.0, 1.04262e-07, 1.0, 1.0, 0.0, 0.0, 1.0, 2.79049e-07, 0.0, 1.0, 1.0, 1.66893e-07, 0.0, 1.0, 1.0, 2.5034e-07, 0.0, 1.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 1.04308e-07, 1.0, 0.0, -1.0, 2.08616e-07, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, -2.71254e-07, 1.0, 0.0, -1.0, -4.49889e-07, 1.0, 0.0, -1.0, -7.21143e-07, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 2.08616e-07, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.86491, -0.501927, 0.0, -1.0, 0.86491, -0.501927, 0.0, -1.0, 0.0, -1.0, 0.0, -1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 1.0, 0.0, -3.68565e-07, 1.0, 1.0, 0.0, -3.16888e-07, 1.0, 1.0, 0.0, -2.38419e-07, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 2.46307e-07, 0.0, -1.0, 1.0, 5.88158e-07, 0.0, -1.0, 1.0, 8.34465e-07, 0.0, -1.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.868243, 0.496139, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.707107, 0.707107, 1.0, 0.0, 0.707107, 0.707107, 1.0, 0.0, 0.707107, 0.707107, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, -2.32874e-07, -1.0, 2.38419e-07, 1.0, -2.32874e-07, -1.0, 2.38419e-07, 1.0, -2.32874e-07, -1.0, 2.38419e-07, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 4.45048e-07, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.39078e-07, 1.0, 1.66893e-07, 0.0, 1.0, 1.0, 0.0, -1.0, -2.38419e-07, 1.0, 1.0, -5.5631e-07, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, -5.5631e-07, 1.0, 1.0, 0.0, 1.58946e-07, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 1.0, 0.0, -4.47035e-07, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, -0.509802, -0.860292, 0.0, 1.0, -0.509802, -0.860292, 0.0, 1.0, -0.509802, -0.860292, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0),
		null, ; no Vertex Colors,
		Vector2Array(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.777778, 0.285714, 0.703703, 0.178571, 0.703703, 0.285714, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.111111, 0.678571, 3.53213e-08, 0.75, 0.111111, 0.75, 0.703703, 0.285714, 0.592592, 0.357143, 0.703703, 0.357143, 0.481481, 0.571429, 0.407407, 0.464286, 0.407407, 0.571429, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.740741, 0.892857, 0.814815, 0.821429, 0.740741, 0.821429, 0.111111, 0.928571, 0.481481, 0.464286, 0.592592, 0.357143, 0.481481, 0.357143, 0.407407, 0.357143, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.740741, 0.714286, 0.185185, 0.75, 0.296296, 0.678572, 0.185185, 0.678571, 0.555556, 0.821429, 0.814815, 1.0, 0.925926, 0.928571, 0.814815, 0.928571, 0.185185, 0.928571, 0.185185, 0.75, 0.296296, 0.464286, 0.814815, 1.0, 0.814815, 0.892857, 0.407407, 0.75, 0.296296, 0.678571, 0.296296, 0.75, 0.703704, 0.178571, 0.592592, 0.285714, 0.703703, 0.285714, 0.148148, 0.321429, 0.259259, 0.214286, 0.148148, 0.214286, 0.296296, 0.178571, 0.407407, 0.357143, 0.407407, 0.178571, 0.814815, 0.75, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.555555, 1.0, 0.740741, 1.0, 0.555556, 0.892857, 0.148148, 0.321429, 0.0740741, 0.214286, 0.0740741, 0.321429, 0.185185, 1.0, 8.83031e-09, 0.571429, 0.111111, 0.642857, 0.111111, 0.571429, 0.481481, 0.678571, 0.407407, 0.678571, 0.259259, 0.404762, 0.185185, 0.321429, 0.185185, 0.404762, 0.629629, 0.714286, 0.555555, 0.642857, 0.555555, 0.714286, 0.185185, 0.571429, 0.148148, 0.214286, 0.0740741, 0.142857, 0.925926, 0.892857, 1.0, 0.964286, 1.0, 0.892857, 0.629629, 0.642857, 0.555555, 0.75, 0.481481, 0.75, 0.555555, 0.678571, 0.481481, 0.642857, 0.481481, 0.75, 1.0, 0.726191, 0.925926, 0.642857, 0.925926, 0.726191, 0.481481, 0.916667, 0.555555, 1.0, 0.555555, 0.916667, 0.074074, 0.154762, 0.0, 0.0714287, 6.62274e-09, 0.154762, 0.925926, 0.964286, 1.0, 1.0, 0.185185, 0.642857, 0.259259, 0.678571, 0.259259, 0.642857, 0.259259, 0.678571, 0.296296, 0.607143, 0.259259, 0.607143, 0.629629, 0.642857, 0.925926, 0.892857, 0.925926, 0.892857, 0.925926, 0.892857, 0.925926, 0.964286, 0.925926, 0.964286, 0.925926, 0.892857, 0.925926, 0.892857, 0.259259, 0.642857, 0.185185, 0.642857, 0.185185, 0.642857, 0.185185, 0.642857, 0.185185, 0.571429, 0.185185, 0.571429, 0.259259, 0.642857, 0.185185, 0.642857, 0.185185, 0.642857, 0.185185, 0.571429, 0.629629, 0.642857, 0.259259, 0.642857, 0.925926, 0.892857, 0.925926, 0.892857, 0.925926, 0.892857, 0.629629, 0.642857, 0.185185, 0.571429, 0.185185, 0.404762, 0.259259, 0.404762, 0.259259, 0.404762, 1.0, 0.726191, 0.481481, 0.916667, 0.074074, 0.154762, 0.481481, 0.916667, 0.259259, 0.404762, 0.185185, 0.404762, 0.074074, 0.154762, 0.074074, 0.154762, 0.074074, 0.154762, 0.259259, 0.404762, 0.185185, 0.404762, 0.185185, 0.404762, 0.925926, 0.726191, 0.925926, 0.726191, 0.185185, 0.404762, 0.259259, 0.404762, 0.259259, 0.404762, 0.925926, 0.726191, 0.925926, 0.726191, 0.185185, 0.404762, 0.259259, 0.404762, 0.259259, 0.404762, 1.0, 0.0, 0.777778, 0.178571, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 5.29819e-08, 0.678571, 0.592592, 0.285714, 0.0, 0.0, 0.0, 0.928571, 0.592592, 0.464286, 1.0, 1.0, 0.814815, 0.714286, 0.296296, 0.75, 0.555556, 0.714286, 0.925926, 1.0, 0.296296, 0.357143, 0.592592, 0.178571, 0.259259, 0.321429, 0.296296, 0.357143, 0.925926, 0.75, 0.0, 1.0, 0.111111, 1.0, 0.0, 0.642857, 0.259259, 0.321429, 0.629629, 0.642857, 0.148148, 0.142857, 0.555555, 0.642857, 0.555555, 0.75, 1.0, 0.642857, 0.481481, 1.0, 0.0740741, 0.0714287, 0.925926, 1.0, 0.185185, 0.678571, 0.296296, 0.678571, 0.629629, 0.642857, 0.629629, 0.642857, 0.629629, 0.642857, 0.925926, 0.892857, 0.259259, 0.642857, 0.259259, 0.642857, 0.185185, 0.642857, 0.259259, 0.642857, 0.185185, 0.642857, 0.185185, 0.642857, 0.925926, 0.892857, 0.925926, 0.892857, 0.925926, 0.892857, 0.925926, 0.892857, 0.185185, 0.571429, 0.185185, 0.404762, 0.185185, 0.404762, 0.259259, 0.404762, 0.555555, 0.916667, 6.62274e-09, 0.154762, 6.62274e-09, 0.154762, 0.074074, 0.154762, 0.481481, 0.916667, 1.0, 0.726191, 0.259259, 0.404762, 0.074074, 0.154762, 0.259259, 0.404762, 0.259259, 0.404762, 0.185185, 0.404762, 0.185185, 0.404762, 0.925926, 0.726191, 0.185185, 0.404762, 0.185185, 0.404762, 0.259259, 0.404762),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 3, 5, 4, 6, 8, 7, 9, 11, 10, 12, 14, 13, 15, 17, 16, 18, 20, 19, 21, 23, 22, 24, 26, 25, 27, 29, 28, 30, 32, 31, 33, 35, 34, 36, 38, 37, 39, 41, 40, 28, 29, 42, 43, 45, 44, 43, 34, 46, 47, 49, 48, 40, 41, 50, 51, 53, 52, 50, 41, 54, 55, 57, 56, 29, 59, 58, 46, 34, 60, 39, 62, 61, 63, 65, 64, 66, 68, 67, 69, 71, 70, 72, 74, 73, 56, 57, 75, 76, 78, 77, 39, 80, 79, 41, 39, 81, 82, 84, 83, 42, 58, 85, 86, 88, 87, 63, 90, 89, 91, 93, 92, 94, 96, 95, 87, 88, 97, 98, 83, 99, 100, 102, 101, 103, 105, 104, 106, 89, 107, 108, 89, 106, 109, 111, 110, 112, 114, 113, 115, 117, 116, 118, 101, 119, 120, 122, 121, 123, 125, 124, 126, 128, 127, 129, 131, 130, 100, 118, 131, 103, 133, 132, 134, 136, 135, 137, 139, 138, 140, 135, 141, 142, 138, 143, 144, 146, 145, 129, 148, 147, 146, 144, 149, 143, 138, 150, 151, 153, 152, 111, 109, 154, 114, 112, 155, 117, 115, 156, 157, 159, 158, 160, 162, 161, 156, 115, 162, 163, 165, 164, 111, 167, 166, 168, 170, 169, 171, 166, 172, 173, 175, 174, 0, 1, 176, 3, 4, 177, 6, 7, 178, 9, 10, 179, 12, 13, 180, 15, 16, 181, 18, 19, 182, 21, 22, 183, 24, 25, 184, 27, 28, 185, 30, 31, 186, 33, 34, 43, 36, 37, 187, 39, 40, 62, 28, 42, 188, 43, 44, 189, 43, 46, 45, 47, 48, 190, 40, 50, 191, 51, 52, 192, 50, 54, 193, 55, 56, 194, 29, 58, 42, 46, 60, 195, 39, 61, 80, 63, 64, 90, 66, 67, 196, 69, 70, 197, 72, 73, 198, 56, 75, 199, 76, 77, 200, 39, 79, 81, 41, 81, 54, 82, 83, 98, 42, 85, 201, 86, 87, 202, 63, 89, 108, 91, 92, 203, 94, 95, 204, 87, 97, 120, 98, 99, 205, 100, 101, 118, 103, 104, 133, 106, 107, 206, 108, 106, 207, 109, 110, 208, 112, 113, 209, 115, 116, 210, 118, 119, 211, 120, 121, 212, 123, 124, 213, 126, 127, 214, 129, 130, 148, 100, 131, 129, 215, 217, 216, 218, 220, 219, 137, 138, 142, 140, 141, 221, 142, 143, 222, 144, 145, 223, 224, 226, 225, 146, 149, 227, 143, 150, 228, 229, 231, 230, 111, 154, 167, 114, 155, 232, 233, 235, 234, 236, 238, 237, 160, 161, 239, 156, 162, 160, 240, 242, 241, 111, 166, 171, 168, 169, 243, 171, 172, 244, 245, 247, 246)
	],
	"morph_arrays":[]
}

[node type="Spatial" name="Scene"]

[node name="Worm to ruinsPhysics" type="StaticBody" parent="."]

friction = 0.5
bounce = 0.0
transform = Transform(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, -7.0, 19.0, 9.0)
collision_layer = 1
collision_mask = 1

[node name="Worm to ruinsCollision" type="CollisionShape" parent="Worm to ruinsPhysics"]

transform = Transform(1.0, 0.0, 0.0, 0.0, -4.37114e-08, 1.0, 0.0, -1.0, -4.37114e-08, 0.0, 0.0, 0.0)
shape = SubResource(1)

[node name="Worm to ruins" type="MeshInstance" parent="Worm to ruinsPhysics/Worm to ruinsCollision"]

mesh = SubResource(4)
visible = true
transform = Transform(1.0, 0.0, 0.0, 0.0, -4.37114e-08, -1.0, 0.0, 1.0, -4.37114e-08, 0.0, 0.0, 0.0)
