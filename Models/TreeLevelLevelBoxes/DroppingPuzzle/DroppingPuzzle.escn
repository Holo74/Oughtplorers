[gd_scene load_steps=1 format=2]

[ext_resource id=1 path="TestingMaterial.png.001.png" type="Texture"]

[ext_resource id=2 path="TestingMaterialMono.png" type="Texture"]

[sub_resource id=1 type="ConcavePolygonShape"]

resource_name = "Cube020"
data = PoolVector3Array(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, -1.0, -1.0, 0.0, -1.0, -8.0, 0.0, -1.0, -1.0, 0.0, 1.0, -1.0, 0.0, 1.0, -1.0, 1.0, 1.0, -1.0, 0.0, -1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, -1.0, 0.0, 1.0, -1.0, 0.0, -1.0, -1.0, 1.0, -1.0, 1.0, 0.0, -1.0, 1.0, -7.0, 1.0, -1.0, -7.0, 1.0, 1.0, -7.0, -1.0, -1.0, 0.0, 1.0, -1.0, 0.0, 4.0, 1.0, 0.0, 1.0, 1.0, -3.66667, -1.0, 1.0, -3.66667, -6.0, 1.0, 0.0, -1.0, 1.0, -6.0, 1.0, 1.0, -7.0, 1.0, 1.0, -6.0, -1.0, 1.0, -6.0, -6.0, 1.0, -7.0, -6.0, -1.0, -6.0, -6.0, -1.0, -6.0, 4.0, -8.0, -6.0, 4.0, -1.0, -7.0, 4.0, 1.0, 0.0, -1.0, 1.0, 0.0, -6.0, -1.0, 0.0, -1.0, -1.0, -7.0, -1.0, -1.0, -7.0, -6.0, 1.0, -7.0, -1.0, -1.0, -6.0, 4.0, -1.0, -7.0, 4.0, 1.0, -6.0, 4.0, 1.0, -7.0, 1.0, 1.0, -7.0, 4.0, -1.0, -7.0, 1.0, 1.0, -6.0, 1.0, 1.0, -6.0, 4.0, 1.0, -7.0, 1.0, -1.0, -7.0, 4.0, -8.0, -7.0, 4.0, -1.0, -7.0, 1.0, -8.0, -7.0, -1.0, -23.0, -7.0, -1.0, -8.0, -7.0, -6.0, -8.0, -6.0, 4.0, -23.0, -6.0, 4.0, -8.0, -7.0, 4.0, -8.0, -7.0, 4.0, -23.0, -7.0, 4.0, -8.0, -7.0, 1.0, -1.0, -7.0, 1.0, -8.0, -7.0, 1.0, -1.0, -7.0, -1.0, -1.0, -7.0, -1.0, -8.0, -7.0, -1.0, -1.0, -7.0, -6.0, -1.0, 0.0, 1.0, -8.0, 0.0, 1.0, -1.0, 0.0, 4.0, -1.0, -3.66667, -6.0, -8.0, -3.66667, -6.0, -1.0, 0.0, -6.0, -1.0, 0.0, -6.0, -8.0, 0.0, -6.0, -1.0, 0.0, -1.0, -23.0, 0.0, -1.0, -31.0, 0.0, -1.0, -23.0, 0.0, 1.0, -23.0, -6.0, -1.0, -23.0, -6.0, -6.0, -23.0, -7.0, -1.0, -8.0, 0.0, 4.0, -8.0, 6.0, 4.0, -23.0, 0.0, 4.0, -8.0, -7.0, 1.0, -23.0, -7.0, 1.0, -8.0, -7.0, -1.0, -31.0, 0.0, 4.0, -31.0, 6.0, 4.0, -31.0, 0.0, 1.0, -8.0, 0.0, -6.0, -23.0, 0.0, -6.0, -8.0, 0.0, -1.0, -8.0, -3.66667, -6.0, -23.0, -3.66667, -6.0, -8.0, 0.0, -6.0, -8.0, 0.0, -1.0, -23.0, 0.0, -1.0, -8.0, 0.0, 1.0, -31.0, -6.0, -1.0, -31.0, -7.0, -1.0, -31.0, -6.0, 1.0, -31.0, -4.0, 1.0, -31.0, -4.0, 4.0, -31.0, 0.0, 1.0, -23.0, -7.0, 4.0, -31.0, -7.0, 4.0, -23.0, -7.0, 1.0, -23.0, -6.0, 4.0, -31.0, -6.0, 4.0, -23.0, -7.0, 4.0, -23.0, -3.66667, -1.0, -31.0, -4.0, -1.0, -23.0, 0.0, -1.0, -23.0, -7.0, 1.0, -31.0, -7.0, 1.0, -23.0, -7.0, -1.0, -23.0, 6.0, 1.0, -31.0, 6.0, 1.0, -23.0, 6.0, 4.0, -8.0, 6.0, 1.0, -23.0, 6.0, 1.0, -8.0, 6.0, 4.0, -23.0, 0.0, 4.0, -23.0, 6.0, 4.0, -31.0, 0.0, 4.0, -23.0, 0.0, 1.0, -23.0, 6.0, 1.0, -8.0, 0.0, 1.0, -8.0, 0.0, 1.0, -8.0, 6.0, 1.0, -8.0, 0.0, 4.0, -31.0, 0.0, 1.0, -31.0, 6.0, 1.0, -23.0, 0.0, 1.0, -23.0, -7.0, -1.0, -31.0, -7.0, -1.0, -23.0, -6.0, -1.0, -23.0, -6.0, -1.0, -31.0, -6.0, -1.0, -23.0, -3.66667, -1.0, -23.0, 0.0, 4.0, -31.0, 0.0, 4.0, -23.0, -3.66667, 4.0, -23.0, -3.66667, 4.0, -31.0, -4.0, 4.0, -23.0, -6.0, 4.0, -31.0, -7.0, 1.0, -31.0, -7.0, 4.0, -31.0, -6.0, 1.0, -31.0, -6.0, 1.0, -31.0, -6.0, 4.0, -31.0, -4.0, 1.0, -31.0, 0.0, -1.0, -31.0, -4.0, -1.0, -31.0, 0.0, 1.0, -31.0, -6.0, 1.0, -31.0, -6.0, 1.0, -31.0, -6.0, -1.0, -8.0, -7.0, -6.0, -23.0, -7.0, -6.0, -8.0, -6.0, -6.0, -8.0, -6.0, -6.0, -23.0, -6.0, -6.0, -8.0, -3.66667, -6.0, -23.0, 0.0, -1.0, -23.0, 0.0, -6.0, -23.0, -3.66667, -1.0, -23.0, -3.66667, -1.0, -23.0, -3.66667, -6.0, -23.0, -6.0, -1.0, -1.0, -7.0, -6.0, -8.0, -7.0, -6.0, -1.0, -6.0, -6.0, -1.0, -6.0, -6.0, -8.0, -6.0, -6.0, -1.0, -3.66667, -6.0, -8.0, 0.0, 4.0, -23.0, 0.0, 4.0, -8.0, -3.66667, 4.0, -8.0, -3.66667, 4.0, -23.0, -3.66667, 4.0, -8.0, -6.0, 4.0, 1.0, 0.0, 1.0, 1.0, 0.0, 4.0, 1.0, -3.66667, 1.0, 1.0, -3.66667, 1.0, 1.0, -3.66667, 4.0, 1.0, -6.0, 1.0, -1.0, 0.0, 4.0, -1.0, -3.66667, 4.0, 1.0, 0.0, 4.0, -1.0, -3.66667, 4.0, -1.0, -6.0, 4.0, 1.0, -3.66667, 4.0, -1.0, 0.0, 4.0, -8.0, 0.0, 4.0, -1.0, -3.66667, 4.0, -1.0, -3.66667, 4.0, -8.0, -3.66667, 4.0, -1.0, -6.0, 4.0, 1.0, 0.0, -6.0, 1.0, -3.66667, -6.0, -1.0, 0.0, -6.0, 1.0, -3.66667, -6.0, 1.0, -6.0, -6.0, -1.0, -3.66667, -6.0, 1.0, 0.0, 1.0, 1.0, -3.66667, 1.0, 1.0, 0.0, -1.0, 1.0, -3.66667, 1.0, 1.0, -6.0, 1.0, 1.0, -3.66667, -1.0, 1.0, -7.0, -1.0, 1.0, -7.0, -6.0, 1.0, -6.0, -1.0, 1.0, -6.0, -1.0, 1.0, -6.0, -6.0, 1.0, -3.66667, -1.0, -31.0, -6.0, 1.0, -32.0, -6.0, 1.0, -31.0, -6.0, -1.0, -31.0, -6.0, -1.0, -31.0, -6.0, -1.0, -31.0, -4.0, -1.0, -31.0, -4.0, 1.0, -31.0, -4.0, 1.0, -31.0, -6.0, 1.0, -31.0, -4.0, -1.0, -31.0, -4.0, -1.0, -31.0, -4.0, 1.0, -31.0, -6.0, -1.0, -32.0, -6.0, -1.0, -31.0, -4.0, -1.0, -31.0, -4.0, -1.0, -32.0, -4.0, -1.0, -31.0, -4.0, 1.0, -31.0, -4.0, 1.0, -32.0, -4.0, 1.0, -31.0, -6.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, -1.0, 1.0, 1.0, -1.0, -8.0, 0.0, -1.0, -8.0, 0.0, 1.0, -1.0, 0.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 0.0, -1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 0.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 0.0, -1.0, -1.0, -7.0, 1.0, -1.0, -7.0, -1.0, 1.0, -7.0, -1.0, -1.0, 0.0, 4.0, 1.0, 0.0, 4.0, 1.0, 0.0, 1.0, 1.0, -3.66667, -6.0, 1.0, 0.0, -6.0, 1.0, 0.0, -1.0, 1.0, -7.0, 1.0, 1.0, -7.0, -1.0, 1.0, -6.0, -1.0, 1.0, -7.0, -6.0, -1.0, -7.0, -6.0, -1.0, -6.0, -6.0, -8.0, -6.0, 4.0, -8.0, -7.0, 4.0, -1.0, -7.0, 4.0, 1.0, 0.0, -6.0, -1.0, 0.0, -6.0, -1.0, 0.0, -1.0, -1.0, -7.0, -6.0, 1.0, -7.0, -6.0, 1.0, -7.0, -1.0, -1.0, -7.0, 4.0, 1.0, -7.0, 4.0, 1.0, -6.0, 4.0, 1.0, -7.0, 4.0, -1.0, -7.0, 4.0, -1.0, -7.0, 1.0, 1.0, -6.0, 4.0, 1.0, -7.0, 4.0, 1.0, -7.0, 1.0, -8.0, -7.0, 4.0, -8.0, -7.0, 1.0, -1.0, -7.0, 1.0, -23.0, -7.0, -1.0, -23.0, -7.0, -6.0, -8.0, -7.0, -6.0, -23.0, -6.0, 4.0, -23.0, -7.0, 4.0, -8.0, -7.0, 4.0, -23.0, -7.0, 4.0, -23.0, -7.0, 1.0, -8.0, -7.0, 1.0, -8.0, -7.0, 1.0, -8.0, -7.0, -1.0, -1.0, -7.0, -1.0, -8.0, -7.0, -1.0, -8.0, -7.0, -6.0, -1.0, -7.0, -6.0, -8.0, 0.0, 1.0, -8.0, 0.0, 4.0, -1.0, 0.0, 4.0, -8.0, -3.66667, -6.0, -8.0, 0.0, -6.0, -1.0, 0.0, -6.0, -8.0, 0.0, -6.0, -8.0, 0.0, -1.0, -1.0, 0.0, -1.0, -31.0, 0.0, -1.0, -31.0, 0.0, 1.0, -23.0, 0.0, 1.0, -23.0, -6.0, -6.0, -23.0, -7.0, -6.0, -23.0, -7.0, -1.0, -8.0, 6.0, 4.0, -23.0, 6.0, 4.0, -23.0, 0.0, 4.0, -23.0, -7.0, 1.0, -23.0, -7.0, -1.0, -8.0, -7.0, -1.0, -31.0, 6.0, 4.0, -31.0, 6.0, 1.0, -31.0, 0.0, 1.0, -23.0, 0.0, -6.0, -23.0, 0.0, -1.0, -8.0, 0.0, -1.0, -23.0, -3.66667, -6.0, -23.0, 0.0, -6.0, -8.0, 0.0, -6.0, -23.0, 0.0, -1.0, -23.0, 0.0, 1.0, -8.0, 0.0, 1.0, -31.0, -7.0, -1.0, -31.0, -7.0, 1.0, -31.0, -6.0, 1.0, -31.0, -4.0, 4.0, -31.0, 0.0, 4.0, -31.0, 0.0, 1.0, -31.0, -7.0, 4.0, -31.0, -7.0, 1.0, -23.0, -7.0, 1.0, -31.0, -6.0, 4.0, -31.0, -7.0, 4.0, -23.0, -7.0, 4.0, -31.0, -4.0, -1.0, -31.0, 0.0, -1.0, -23.0, 0.0, -1.0, -31.0, -7.0, 1.0, -31.0, -7.0, -1.0, -23.0, -7.0, -1.0, -31.0, 6.0, 1.0, -31.0, 6.0, 4.0, -23.0, 6.0, 4.0, -23.0, 6.0, 1.0, -23.0, 6.0, 4.0, -8.0, 6.0, 4.0, -23.0, 6.0, 4.0, -31.0, 6.0, 4.0, -31.0, 0.0, 4.0, -23.0, 6.0, 1.0, -8.0, 6.0, 1.0, -8.0, 0.0, 1.0, -8.0, 6.0, 1.0, -8.0, 6.0, 4.0, -8.0, 0.0, 4.0, -31.0, 6.0, 1.0, -23.0, 6.0, 1.0, -23.0, 0.0, 1.0, -31.0, -7.0, -1.0, -31.0, -6.0, -1.0, -23.0, -6.0, -1.0, -31.0, -6.0, -1.0, -31.0, -4.0, -1.0, -23.0, -3.66667, -1.0, -31.0, 0.0, 4.0, -31.0, -4.0, 4.0, -23.0, -3.66667, 4.0, -31.0, -4.0, 4.0, -31.0, -6.0, 4.0, -23.0, -6.0, 4.0, -31.0, -7.0, 4.0, -31.0, -6.0, 4.0, -31.0, -6.0, 1.0, -31.0, -6.0, 4.0, -31.0, -4.0, 4.0, -31.0, -4.0, 1.0, -31.0, -4.0, -1.0, -31.0, -4.0, 1.0, -31.0, 0.0, 1.0, -31.0, -6.0, 1.0, -31.0, -6.0, -1.0, -31.0, -6.0, -1.0, -23.0, -7.0, -6.0, -23.0, -6.0, -6.0, -8.0, -6.0, -6.0, -23.0, -6.0, -6.0, -23.0, -3.66667, -6.0, -8.0, -3.66667, -6.0, -23.0, 0.0, -6.0, -23.0, -3.66667, -6.0, -23.0, -3.66667, -1.0, -23.0, -3.66667, -6.0, -23.0, -6.0, -6.0, -23.0, -6.0, -1.0, -8.0, -7.0, -6.0, -8.0, -6.0, -6.0, -1.0, -6.0, -6.0, -8.0, -6.0, -6.0, -8.0, -3.66667, -6.0, -1.0, -3.66667, -6.0, -23.0, 0.0, 4.0, -23.0, -3.66667, 4.0, -8.0, -3.66667, 4.0, -23.0, -3.66667, 4.0, -23.0, -6.0, 4.0, -8.0, -6.0, 4.0, 1.0, 0.0, 4.0, 1.0, -3.66667, 4.0, 1.0, -3.66667, 1.0, 1.0, -3.66667, 4.0, 1.0, -6.0, 4.0, 1.0, -6.0, 1.0, -1.0, -3.66667, 4.0, 1.0, -3.66667, 4.0, 1.0, 0.0, 4.0, -1.0, -6.0, 4.0, 1.0, -6.0, 4.0, 1.0, -3.66667, 4.0, -8.0, 0.0, 4.0, -8.0, -3.66667, 4.0, -1.0, -3.66667, 4.0, -8.0, -3.66667, 4.0, -8.0, -6.0, 4.0, -1.0, -6.0, 4.0, 1.0, -3.66667, -6.0, -1.0, -3.66667, -6.0, -1.0, 0.0, -6.0, 1.0, -6.0, -6.0, -1.0, -6.0, -6.0, -1.0, -3.66667, -6.0, 1.0, -3.66667, 1.0, 1.0, -3.66667, -1.0, 1.0, 0.0, -1.0, 1.0, -6.0, 1.0, 1.0, -6.0, -1.0, 1.0, -3.66667, -1.0, 1.0, -7.0, -6.0, 1.0, -6.0, -6.0, 1.0, -6.0, -1.0, 1.0, -6.0, -6.0, 1.0, -3.66667, -6.0, 1.0, -3.66667, -1.0, -32.0, -6.0, 1.0, -32.0, -6.0, -1.0, -31.0, -6.0, -1.0, -31.0, -6.0, -1.0, -31.0, -4.0, -1.0, -31.0, -4.0, -1.0, -31.0, -4.0, 1.0, -31.0, -6.0, 1.0, -31.0, -6.0, 1.0, -31.0, -4.0, -1.0, -31.0, -4.0, 1.0, -31.0, -4.0, 1.0, -32.0, -6.0, -1.0, -32.0, -4.0, -1.0, -31.0, -4.0, -1.0, -32.0, -4.0, -1.0, -32.0, -4.0, 1.0, -31.0, -4.0, 1.0, -32.0, -4.0, 1.0, -32.0, -6.0, 1.0, -31.0, -6.0, 1.0)

[sub_resource id=2 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0;
uniform sampler2D texture_1;


void dir_space_convert_world_to_view(inout vec3 dir, in mat4 view_mat) {
    dir = normalize(view_mat * vec4(dir, 0.0)).xyz;
}


void euler_angle_XYZ_to_mat4(in vec3 rot, out mat4 rot_mat) {
    mat3 rx = mat3(vec3(1, 0, 0),
                   vec3(0, cos(rot.x), sin(rot.x)),
                   vec3(0, -sin(rot.x), cos(rot.x)));
    mat3 ry = mat3(vec3(cos(rot.y), 0, -sin(rot.y)),
                   vec3(0, 1, 0),
                   vec3(sin(rot.y), 0, cos(rot.y)));
    mat3 rz = mat3(vec3(cos(rot.z), sin(rot.z), 0),
                   vec3(-sin(rot.z), cos(rot.z), 0),
                   vec3(0, 0, 1));
    rot_mat = mat4(rz * ry * rx);
}


void location_to_mat4(in vec3 loc, out mat4 loc_mat) {
    loc_mat = mat4(vec4(1.0, 0.0, 0.0, 0),
                   vec4(0.0, 1.0, 0.0, 0),
                   vec4(0.0, 0.0, 1.0, 0),
                   vec4(loc, 1.0));
}


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}


void point_space_convert_view_to_model(inout vec3 pos,
        in mat4 inv_model_mat, in mat4 inv_view_mat) {
    pos = (inv_model_mat * (inv_view_mat * vec4(pos, 1.0))).xyz;
}


void scale_to_mat4(in vec3 scale, out mat4 scale_mat) {
    scale_mat = mat4(vec4(scale.x, 0.0, 0.0, 0.0),
                     vec4(0.0, scale.y, 0.0, 0.0),
                     vec4(0.0, 0.0, scale.z, 0.0),
                     vec4(0.0, 0.0, 0.0, 1.0));
}


void space_convert_yup_to_zup(inout vec3 dir) {
    dir = mat3(vec3(1, 0, 0), vec3(0, 0, 1), vec3(0, -1, 0)) * dir;
}


void space_convert_zup_to_yup(inout vec3 dir) {
    dir = mat3(vec3(1, 0, 0), vec3(0, 0, -1), vec3(0, 1, 0)) * dir;
}

void vertex () {
}

void fragment () {
	mat4 INV_MODEL_MAT = inverse(WORLD_MATRIX);
	mat4 INV_VIEW_MAT = inverse(INV_CAMERA_MATRIX);
	
	// node: 'Texture Coordinate'
	// type: 'ShaderNodeTexCoord'
	// input sockets handling
	// output sockets definitions
	vec3 node0_out0_object;
	
	node0_out0_object = VERTEX;
	point_space_convert_view_to_model(node0_out0_object, INV_MODEL_MAT,
		INV_VIEW_MAT);
	space_convert_yup_to_zup(node0_out0_object);
	
	
	// node: 'Mapping'
	// type: 'ShaderNodeMapping'
	// input sockets handling
	vec3 node1_in0_vector = node0_out0_object;
	vec3 node1_in1_location = vec3(0.0, 0.0, 0.0);
	vec3 node1_in2_rotation = vec3(0.0, 0.0, 0.0);
	vec3 node1_in3_scale = vec3(1.0, 1.0, 1.0);
	// output sockets definitions
	vec3 node1_out0_vector;
	
	// Mapping type: POINT
	mat4 node1_var0_location;
	location_to_mat4(node1_in1_location, node1_var0_location);
	mat4 node1_var1_rotation;
	euler_angle_XYZ_to_mat4(node1_in2_rotation, node1_var1_rotation);
	mat4 node1_var2_scale;
	scale_to_mat4(node1_in3_scale, node1_var2_scale);
	mat4 node1_var3_xform_mat = node1_var0_location * node1_var1_rotation *
		node1_var2_scale;
	node1_out0_vector = (node1_var3_xform_mat * vec4(node1_in0_vector, 1.0)).xyz;
	
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node2_in0_vector = node1_out0_vector;
	// output sockets definitions
	vec4 node2_out0_color;
	float node2_out1_alpha;
	
	node_tex_image(node2_in0_vector, texture_0, node2_out0_color, node2_out1_alpha);
	
	
	// node: 'Image Texture.001'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node3_in0_vector = node1_out0_vector;
	// output sockets definitions
	vec4 node3_out0_color;
	float node3_out1_alpha;
	
	node_tex_image(node3_in0_vector, texture_1, node3_out0_color, node3_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node4_in0_basecolor = node2_out0_color;
	float node4_in1_subsurface = float(0.0);
	vec3 node4_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node4_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node4_in4_metallic = float(1.0);
	float node4_in5_specular = float(1.0);
	float node4_in6_speculartint = float(0.0);
	float node4_in7_roughness = float(1.0);
	float node4_in8_anisotropic = float(0.0);
	float node4_in9_anisotropicrotation = float(0.0);
	float node4_in10_sheen = float(0.0);
	float node4_in11_sheentint = float(0.5);
	float node4_in12_clearcoat = float(0.0);
	float node4_in13_clearcoatroughness = float(0.0);
	float node4_in14_ior = float(1.4500000476837158);
	float node4_in15_transmission = float(0.0);
	float node4_in16_transmissionroughness = float(0.0);
	vec4 node4_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node4_in18_alpha = float(1.0);
	vec3 node4_in19_normal = node3_out0_color.rgb;
	vec3 node4_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node4_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node4_bsdf_out0_albedo;
	float node4_bsdf_out1_sss_strength;
	float node4_bsdf_out3_specular;
	float node4_bsdf_out2_metallic;
	float node4_bsdf_out4_roughness;
	float node4_bsdf_out5_clearcoat;
	float node4_bsdf_out6_clearcoat_gloss;
	float node4_bsdf_out7_anisotropy;
	float node4_bsdf_out8_transmission;
	float node4_bsdf_out9_ior;
	
	node_bsdf_principled(node4_in0_basecolor, node4_in1_subsurface,
		node4_in3_subsurfacecolor, node4_in4_metallic, node4_in5_specular,
		node4_in7_roughness, node4_in12_clearcoat, node4_in13_clearcoatroughness,
		node4_in8_anisotropic, node4_in15_transmission, node4_in14_ior,
		node4_bsdf_out0_albedo, node4_bsdf_out1_sss_strength, node4_bsdf_out2_metallic,
		node4_bsdf_out3_specular, node4_bsdf_out4_roughness, node4_bsdf_out5_clearcoat,
		node4_bsdf_out6_clearcoat_gloss, node4_bsdf_out7_anisotropy,
		node4_bsdf_out8_transmission, node4_bsdf_out9_ior);
	space_convert_zup_to_yup(node4_in19_normal);
	dir_space_convert_world_to_view(node4_in19_normal, INV_CAMERA_MATRIX);
	
	
	ALBEDO = node4_bsdf_out0_albedo;
	SSS_STRENGTH = node4_bsdf_out1_sss_strength;
	SPECULAR = node4_bsdf_out3_specular;
	METALLIC = node4_bsdf_out2_metallic;
	ROUGHNESS = node4_bsdf_out4_roughness;
	CLEARCOAT = node4_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node4_bsdf_out6_clearcoat_gloss;
	NORMAL = node4_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node4_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node4_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node4_bsdf_out7_anisotropy;
}
"

[sub_resource id=3 type="ShaderMaterial"]

resource_name = "NewPlaceHolder"
shader = SubResource(2)
shader_param/texture_0 = ExtResource(1)
shader_param/texture_1 = ExtResource(2)

[sub_resource id=4 type="ArrayMesh"]

resource_name = "Cube020"
surfaces/0 = {
	"material":SubResource(3),
	"primitive":4,
	"arrays":[
		Vector3Array(1.0, -1.0, -1.0, 1.0, 1.0, 0.0, 1.0, 1.0, -1.0, -1.0, 1.0, 0.0, -8.0, -1.0, 0.0, -1.0, -1.0, 0.0, -1.0, -1.0, 0.0, -1.0, 1.0, -1.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, 1.0, 1.0, -1.0, 1.0, 1.0, 0.0, 1.0, -1.0, 0.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.0, 1.0, -1.0, 7.0, -1.0, 1.0, 7.0, 1.0, 1.0, 7.0, 1.0, 1.0, 0.0, -1.0, 4.0, 0.0, 1.0, -1.0, 0.0, 1.0, -6.0, 3.66667, 1.0, -1.0, 3.66667, 1.0, -1.0, 6.0, 1.0, 1.0, 7.0, 1.0, 1.0, 6.0, -1.0, -6.0, 6.0, 1.0, -6.0, 7.0, 1.0, -6.0, 6.0, -1.0, 4.0, 7.0, -8.0, 4.0, 6.0, -1.0, 4.0, 6.0, 1.0, -6.0, 0.0, 1.0, -1.0, 0.0, -1.0, -6.0, 7.0, -1.0, -1.0, 7.0, 1.0, 4.0, 6.0, 1.0, 4.0, 7.0, 1.0, 4.0, 6.0, -8.0, 4.0, 7.0, -1.0, 4.0, 7.0, -8.0, -6.0, 7.0, -23.0, -1.0, 7.0, -8.0, -1.0, 7.0, -8.0, 4.0, 7.0, -23.0, 4.0, 6.0, -8.0, 4.0, 6.0, -8.0, 1.0, 7.0, -23.0, 4.0, 7.0, -8.0, 1.0, 0.0, -1.0, -6.0, 0.0, -8.0, -6.0, 3.66667, -1.0, -6.0, 3.66667, -8.0, -6.0, 0.0, -1.0, -6.0, 0.0, -23.0, 1.0, 0.0, -31.0, -1.0, 0.0, -23.0, -1.0, 0.0, -23.0, -1.0, 7.0, -23.0, -6.0, 6.0, -23.0, -1.0, 6.0, -23.0, 4.0, 0.0, -8.0, 4.0, -6.0, -8.0, 4.0, 0.0, -23.0, 1.0, 7.0, -31.0, 1.0, 0.0, -31.0, 4.0, -6.0, -31.0, 4.0, 0.0, -23.0, -6.0, 0.0, -8.0, -6.0, 0.0, -23.0, -6.0, 3.66667, -8.0, -6.0, 3.66667, -31.0, 1.0, 6.0, -31.0, -1.0, 7.0, -31.0, -1.0, 6.0, -31.0, 4.0, 4.0, -31.0, 1.0, 4.0, -31.0, 4.0, 7.0, -23.0, 4.0, 7.0, -31.0, 4.0, 6.0, -23.0, 4.0, 6.0, -23.0, -1.0, 0.0, -31.0, -1.0, 4.0, -23.0, -1.0, 3.66667, -31.0, 1.0, 7.0, -23.0, 4.0, -6.0, -31.0, 1.0, -6.0, -23.0, 1.0, -6.0, -8.0, 4.0, -6.0, -8.0, 1.0, -6.0, -31.0, 4.0, 0.0, -23.0, 4.0, -6.0, -8.0, 1.0, 0.0, -23.0, 1.0, -6.0, -23.0, 1.0, 0.0, -8.0, 4.0, 0.0, -8.0, 1.0, -6.0, -8.0, 1.0, 0.0, -31.0, 1.0, -6.0, -31.0, 1.0, 0.0, -23.0, -1.0, 6.0, -31.0, -1.0, 7.0, -23.0, -1.0, 7.0, -31.0, -1.0, 6.0, -23.0, 4.0, 3.66667, -31.0, 4.0, 4.0, -31.0, 4.0, 7.0, -31.0, 1.0, 7.0, -31.0, 1.0, 4.0, -31.0, 4.0, 6.0, -31.0, 1.0, 6.0, -31.0, -1.0, 4.0, -31.0, -1.0, 0.0, -31.0, 1.0, 6.0, -8.0, -6.0, 6.0, -23.0, -6.0, 7.0, -8.0, -6.0, 7.0, -23.0, -6.0, 6.0, -8.0, -6.0, 6.0, -23.0, -1.0, 3.66667, -23.0, -6.0, 0.0, -23.0, -1.0, 0.0, -23.0, -6.0, 3.66667, -8.0, -6.0, 7.0, -1.0, -6.0, 7.0, -1.0, -6.0, 3.66667, -8.0, 4.0, 3.66667, 1.0, 1.0, 3.66667, 1.0, 4.0, 0.0, 1.0, 4.0, 3.66667, 1.0, 4.0, 0.0, -1.0, 4.0, 3.66667, -1.0, 4.0, 0.0, 1.0, 4.0, 3.66667, -1.0, -6.0, 0.0, 1.0, -6.0, 3.66667, 1.0, -6.0, 0.0, 1.0, -6.0, 7.0, 1.0, -1.0, 7.0, 1.0, -6.0, 6.0, -31.0, -1.0, 6.0, -32.0, 1.0, 6.0, -31.0, 1.0, 6.0, -31.0, 1.0, 4.0, -32.0, -1.0, 6.0, -31.0, 1.0, 4.0, -32.0, -1.0, 4.0, -31.0, -1.0, 4.0, -31.0, 1.0, 6.0, -32.0, 1.0, 4.0, -31.0, 1.0, 4.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 4.0, 0.0, 1.0, -6.0, 0.0, -8.0, 4.0, 7.0, 1.0, -6.0, 7.0, 1.0, 4.0, 7.0, 1.0, 4.0, 7.0, -23.0, -6.0, 7.0, -23.0, 4.0, 7.0, -8.0, 4.0, 0.0, -8.0, -6.0, 0.0, -31.0, 1.0, 0.0, -23.0, -6.0, 7.0, -31.0, 1.0, -6.0, -23.0, -6.0, 0.0, -31.0, 1.0, 0.0, -31.0, 4.0, 0.0, -31.0, 4.0, 4.0, -31.0, 4.0, 7.0, -31.0, -1.0, 0.0, -31.0, -1.0, 7.0, -31.0, 4.0, -6.0, -31.0, 4.0, -6.0, -8.0, 1.0, -6.0, -8.0, 4.0, -6.0, -31.0, 4.0, 6.0, -23.0, -6.0, 6.0, -23.0, -1.0, 6.0, -23.0, -6.0, 6.0, -23.0, -6.0, 3.66667, 1.0, -1.0, 3.66667, 1.0, -6.0, 3.66667, 1.0, -6.0, 6.0, -31.0, -1.0, 6.0, -32.0, -1.0, 6.0, -32.0, 1.0, 6.0, -32.0, -1.0, 4.0, -31.0, 1.0, 4.0, -32.0, 1.0, 4.0, -32.0, -1.0, 4.0, -32.0, 1.0, 6.0),
		Vector3Array(-1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -2.38419e-07, 1.0, 0.0, -2.38419e-07, 1.0, 0.0, -2.38419e-07, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 4.76837e-07, -1.0, 0.0, 4.76837e-07, -1.0, 0.0, 4.76837e-07, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0),
		FloatArray(0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0),
		null, ; no Vertex Colors,
		Vector2Array(0.625, 1.0, 0.375, 0.75, 0.375, 1.0, 0.375, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.375, 0.25, 0.375, 0.5, 0.375, 0.5, 0.125, 0.25, 0.125, 0.5, 0.875, 0.5, 0.625, 0.25, 0.625, 0.5, 0.625, 0.75, 0.375, 0.5, 0.375, 0.75, 0.125, 0.5, 0.375, 0.5, 0.625, 0.75, 0.625, 0.75, 0.625, 0.75, 0.625, 0.75, 0.375, 0.75, 0.375, 0.75, 0.625, 0.5, 0.875, 0.5, 0.875, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.875, 0.5, 0.875, 0.5, 0.625, 0.5, 0.625, 0.5, 0.125, 0.5, 0.375, 0.75, 0.375, 0.75, 0.375, 0.5, 0.375, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.375, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.375, 0.5, 0.625, 0.5, 0.625, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.625, 0.5, 0.625, 0.5, 0.375, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.375, 0.5, 0.375, 0.75, 0.375, 0.75, 0.375, 0.75, 0.125, 0.5, 0.375, 0.5, 0.375, 0.5, 0.125, 0.5, 0.625, 0.5, 0.875, 0.5, 0.875, 0.5, 0.625, 0.75, 0.625, 0.75, 0.625, 0.75, 0.625, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.625, 0.5, 0.375, 0.5, 0.625, 0.5, 0.625, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.625, 0.25, 0.375, 0.25, 0.875, 0.25, 0.125, 0.5, 0.625, 0.75, 0.375, 0.5, 0.625, 0.75, 0.125, 0.5, 0.375, 0.75, 0.625, 0.5, 0.375, 0.5, 0.375, 0.5, 0.625, 0.5, 0.375, 0.5, 0.625, 0.5, 0.375, 0.5, 0.625, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.625, 0.5, 0.625, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.75, 0.625, 0.75, 0.625, 0.75, 0.625, 0.5, 0.625, 0.5, 0.375, 0.5, 0.625, 0.5, 0.375, 0.5, 0.375, 0.5, 0.625, 0.5, 0.375, 0.5),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 3, 5, 4, 6, 8, 7, 9, 11, 10, 12, 14, 13, 15, 17, 16, 18, 3, 19, 20, 22, 21, 23, 25, 24, 26, 28, 27, 29, 31, 30, 5, 33, 32, 15, 35, 34, 36, 31, 29, 16, 17, 37, 24, 25, 38, 16, 40, 39, 41, 43, 42, 44, 46, 45, 47, 39, 48, 35, 16, 47, 34, 35, 43, 19, 3, 49, 50, 52, 51, 5, 54, 53, 55, 57, 56, 58, 60, 59, 61, 63, 62, 43, 47, 64, 65, 67, 66, 4, 53, 68, 69, 71, 70, 49, 4, 57, 72, 74, 73, 65, 76, 75, 64, 48, 77, 78, 80, 79, 81, 83, 82, 42, 64, 84, 85, 87, 86, 88, 89, 87, 90, 61, 91, 92, 94, 93, 95, 97, 96, 94, 99, 98, 100, 102, 101, 83, 100, 103, 104, 61, 90, 80, 104, 105, 72, 107, 106, 108, 110, 109, 65, 112, 111, 103, 113, 113, 114, 116, 115, 71, 118, 117, 119, 121, 120, 60, 119, 122, 26, 124, 123, 125, 26, 118, 126, 63, 61, 30, 126, 104, 127, 1, 128, 25, 127, 129, 130, 132, 131, 133, 131, 31, 131, 132, 63, 31, 131, 126, 134, 136, 135, 125, 135, 28, 20, 1, 127, 22, 127, 25, 23, 138, 137, 22, 23, 139, 140, 142, 141, 82, 103, 103, 113, 143, 143, 143, 82, 82, 82, 103, 144, 145, 147, 146, 148, 150, 149, 0, 1, 20, 3, 4, 49, 6, 7, 151, 9, 10, 152, 12, 13, 153, 15, 16, 35, 18, 19, 154, 20, 21, 155, 23, 24, 138, 26, 27, 124, 29, 30, 156, 5, 32, 54, 15, 34, 157, 36, 29, 158, 16, 37, 40, 24, 38, 159, 16, 39, 47, 41, 42, 160, 44, 45, 161, 47, 48, 64, 35, 47, 43, 34, 43, 41, 19, 49, 162, 50, 51, 163, 5, 53, 4, 55, 56, 164, 58, 59, 165, 61, 62, 91, 43, 64, 42, 65, 66, 166, 4, 68, 57, 69, 70, 167, 49, 57, 55, 72, 73, 107, 168, 170, 169, 64, 77, 84, 78, 79, 171, 81, 82, 172, 42, 84, 173, 85, 86, 174, 88, 87, 85, 90, 91, 175, 92, 93, 176, 95, 96, 177, 94, 98, 93, 100, 101, 103, 83, 103, 82, 104, 90, 105, 80, 105, 79, 72, 106, 178, 76, 178, 75, 65, 111, 76, 103, 113, 103, 114, 115, 179, 71, 117, 70, 119, 120, 122, 180, 182, 181, 26, 123, 118, 125, 118, 71, 126, 61, 104, 30, 104, 80, 127, 128, 129, 25, 129, 38, 130, 131, 133, 133, 31, 36, 131, 63, 126, 31, 126, 30, 134, 135, 125, 125, 28, 26, 20, 127, 22, 22, 25, 23, 23, 137, 139, 183, 185, 184, 186, 188, 187, 82, 103, 82, 113, 143, 113, 143, 82, 143, 82, 144, 189, 190, 192, 191, 148, 149, 193)
	],
	"morph_arrays":[]
}

[node type="Spatial" name="Scene"]

[node name="DroppingPuzzlePhysics" type="StaticBody" parent="."]

friction = 0.5
bounce = 0.0
transform = Transform(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, -5.0, -9.0, 17.0)
collision_layer = 1
collision_mask = 1

[node name="DroppingPuzzleCollision" type="CollisionShape" parent="DroppingPuzzlePhysics"]

transform = Transform(1.0, 0.0, 0.0, 0.0, -4.37114e-08, 1.0, 0.0, -1.0, -4.37114e-08, 0.0, 0.0, 0.0)
shape = SubResource(1)

[node name="DroppingPuzzle" type="MeshInstance" parent="DroppingPuzzlePhysics/DroppingPuzzleCollision"]

mesh = SubResource(4)
visible = true
transform = Transform(1.0, 0.0, 0.0, 0.0, -4.37114e-08, -1.0, 0.0, 1.0, -4.37114e-08, 0.0, 0.0, 0.0)
