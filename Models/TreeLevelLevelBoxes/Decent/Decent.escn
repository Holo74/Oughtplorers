[gd_scene load_steps=1 format=2]

[ext_resource id=1 path="TestingMaterial.png.001.png" type="Texture"]

[ext_resource id=2 path="TestingMaterialMono.png" type="Texture"]

[sub_resource id=1 type="ConcavePolygonShape"]

resource_name = "Cube018"
data = PoolVector3Array(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, -1.0, 1.0, 0.0, -1.0, 1.0, -7.0, -1.0, -1.0, 0.0, -1.0, -1.0, 0.0, 1.0, -1.0, 1.0, 1.0, -1.0, 0.0, -1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, -1.0, 0.0, 1.0, -1.0, 0.0, -1.0, -1.0, 1.0, -1.0, 1.0, 0.0, -1.0, 1.0, -7.0, 1.0, -1.0, -7.0, 1.0, 1.0, -7.0, -1.0, 1.0, 0.0, 1.0, 1.0, -7.0, 1.0, 1.0, 0.0, -1.0, -1.0, -8.4729, -6.15514, -1.0, -9.0, -8.0, -1.0, -1.4729, -6.15514, -1.0, 0.0, 1.0, -1.0, -7.0, 1.0, 1.0, 0.0, 1.0, -9.0, 0.0, -1.0, -9.0, -7.0, -1.0, -9.0, 0.0, 1.0, -8.0, 0.0, 1.0, -9.0, 0.0, 1.0, -8.0, -7.0, 1.0, -8.0, 0.0, -1.0, -9.0, 0.0, -1.0, -8.0, 0.0, 1.0, -8.0, -7.0, 1.0, -9.0, -7.0, 1.0, -8.0, -7.0, -1.0, -9.0, -2.0, -8.0, -9.0, -2.0, -10.0, -9.0, -9.0, -8.0, -6.0, -8.4729, -6.0, -6.0, -9.0, -8.0, -1.0, -8.4729, -6.15514, -8.0, -1.4729, -6.15514, -8.0, -2.0, -8.0, -9.0, -1.4729, -6.15514, -9.0, -1.4729, -6.15514, -9.0, -2.0, -8.0, -9.0, -8.4729, -6.15514, -8.0, -9.0, -10.0, -9.0, -9.0, -10.0, -8.0, -2.0, -10.0, -8.0, -2.0, -8.0, -8.0, -2.0, -10.0, -9.0, -2.0, -8.0, -1.0, -9.0, -8.0, -1.0, -9.0, -10.0, -1.0, -2.0, -8.0, -6.0, -9.0, -8.0, -6.0, -9.0, -10.0, -1.0, -9.0, -8.0, -8.0, -9.0, -8.0, -8.0, -9.0, -10.0, -6.0, -9.0, -8.0, -1.0, -2.0, -8.0, -1.0, -2.0, -10.0, -6.0, -2.0, -8.0, -1.0, -9.0, -10.0, -6.0, -9.0, -10.0, -1.0, -2.0, -10.0, -1.0, -1.4729, -6.15514, -1.0, -2.0, -8.0, -6.0, -1.4729, -6.15514, -6.0, -9.0, -8.0, -6.0, -10.0, -8.0, -8.0, -9.0, -8.0, -1.0, -7.0, 1.0, -6.0, -7.0, 1.0, -1.0, -7.0, -1.0, -1.0, 0.0, -1.0, -6.0, 0.0, -1.0, -1.0, 0.0, 1.0, -1.0, 0.0, 1.0, -6.0, 0.0, 1.0, -1.0, -7.0, 1.0, -9.0, -8.4729, -6.15514, -9.0, -9.0, -8.0, -8.0, -8.4729, -6.0, -9.0, -9.0, -8.0, -9.0, -9.0, -10.0, -8.0, -9.0, -8.0, -6.0, -9.0, -10.0, -8.0, -9.0, -10.0, -6.0, -2.0, -10.0, -6.0, -1.4729, -6.15514, -6.0, -2.0, -8.0, -8.0, -1.4729, -6.15514, -6.0, -7.0, 1.0, -8.0, -7.0, 1.0, -6.0, -7.0, -1.0, -6.0, 0.0, -1.0, -8.0, 0.0, -1.0, -6.0, 0.0, 1.0, -6.0, 0.0, 1.0, -8.0, 0.0, 1.0, -6.0, -7.0, 1.0, -6.0, 0.0, -1.0, -6.0, -1.4729, -6.15514, -8.0, 0.0, -1.0, -9.0, -7.0, -1.0, -9.0, -8.4729, -6.15514, -8.0, -7.0, -1.0, -8.0, -7.0, -1.0, -8.0, -8.4729, -6.0, -6.0, -7.0, -1.0, -1.0, 0.0, -1.0, -1.0, -1.4729, -6.15514, -6.0, 0.0, -1.0, -9.0, 0.0, -1.0, -9.0, -1.4729, -6.15514, -9.0, -7.0, -1.0, -8.0, 0.0, -1.0, -8.0, -1.4729, -6.15514, -9.0, 0.0, -1.0, -6.0, -7.0, -1.0, -6.0, -8.4729, -6.0, -1.0, -7.0, -1.0, -1.0, -7.0, -1.0, -1.0, -8.4729, -6.15514, -1.0, 0.0, -1.0, -6.0, -8.4729, -6.0, -6.0, -10.0, -6.0, -6.0, -9.0, -8.0, -8.0, -9.0, -8.0, -8.0, -10.0, -8.0, -8.0, -8.4729, -6.0, -8.0, -8.4729, -6.0, -8.0, -10.0, -6.0, -6.0, -8.4729, -6.0, 1.0, 0.0, 1.0, 1.0, 0.0, -1.0, 1.0, 1.0, -1.0, 1.0, -7.0, -1.0, -1.0, -7.0, -1.0, -1.0, 0.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 0.0, -1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 0.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 0.0, -1.0, -1.0, -7.0, 1.0, -1.0, -7.0, -1.0, 1.0, -7.0, -1.0, 1.0, -7.0, 1.0, 1.0, -7.0, -1.0, 1.0, 0.0, -1.0, -1.0, -9.0, -8.0, -1.0, -2.0, -8.0, -1.0, -1.4729, -6.15514, -1.0, -7.0, 1.0, 1.0, -7.0, 1.0, 1.0, 0.0, 1.0, -9.0, -7.0, -1.0, -9.0, -7.0, 1.0, -9.0, 0.0, 1.0, -9.0, 0.0, 1.0, -9.0, -7.0, 1.0, -8.0, -7.0, 1.0, -9.0, 0.0, -1.0, -9.0, 0.0, 1.0, -8.0, 0.0, 1.0, -9.0, -7.0, 1.0, -9.0, -7.0, -1.0, -8.0, -7.0, -1.0, -9.0, -2.0, -10.0, -9.0, -9.0, -10.0, -9.0, -9.0, -8.0, -6.0, -9.0, -8.0, -1.0, -9.0, -8.0, -1.0, -8.4729, -6.15514, -8.0, -2.0, -8.0, -9.0, -2.0, -8.0, -9.0, -1.4729, -6.15514, -9.0, -2.0, -8.0, -9.0, -9.0, -8.0, -9.0, -8.4729, -6.15514, -9.0, -9.0, -10.0, -9.0, -2.0, -10.0, -8.0, -2.0, -10.0, -8.0, -2.0, -10.0, -9.0, -2.0, -10.0, -9.0, -2.0, -8.0, -1.0, -9.0, -10.0, -1.0, -2.0, -10.0, -1.0, -2.0, -8.0, -6.0, -9.0, -10.0, -1.0, -9.0, -10.0, -1.0, -9.0, -8.0, -8.0, -9.0, -10.0, -6.0, -9.0, -10.0, -6.0, -9.0, -8.0, -1.0, -2.0, -10.0, -6.0, -2.0, -10.0, -6.0, -2.0, -8.0, -6.0, -9.0, -10.0, -6.0, -2.0, -10.0, -1.0, -2.0, -10.0, -1.0, -2.0, -8.0, -6.0, -2.0, -8.0, -6.0, -1.4729, -6.15514, -6.0, -10.0, -8.0, -8.0, -10.0, -8.0, -8.0, -9.0, -8.0, -6.0, -7.0, 1.0, -6.0, -7.0, -1.0, -1.0, -7.0, -1.0, -6.0, 0.0, -1.0, -6.0, 0.0, 1.0, -1.0, 0.0, 1.0, -6.0, 0.0, 1.0, -6.0, -7.0, 1.0, -1.0, -7.0, 1.0, -9.0, -9.0, -8.0, -8.0, -9.0, -8.0, -8.0, -8.4729, -6.0, -9.0, -9.0, -10.0, -8.0, -9.0, -10.0, -8.0, -9.0, -8.0, -8.0, -9.0, -10.0, -8.0, -2.0, -10.0, -6.0, -2.0, -10.0, -6.0, -2.0, -8.0, -8.0, -2.0, -8.0, -8.0, -1.4729, -6.15514, -8.0, -7.0, 1.0, -8.0, -7.0, -1.0, -6.0, -7.0, -1.0, -8.0, 0.0, -1.0, -8.0, 0.0, 1.0, -6.0, 0.0, 1.0, -8.0, 0.0, 1.0, -8.0, -7.0, 1.0, -6.0, -7.0, 1.0, -6.0, -1.4729, -6.15514, -8.0, -1.4729, -6.15514, -8.0, 0.0, -1.0, -9.0, -8.4729, -6.15514, -8.0, -8.4729, -6.0, -8.0, -7.0, -1.0, -8.0, -8.4729, -6.0, -6.0, -8.4729, -6.0, -6.0, -7.0, -1.0, -1.0, -1.4729, -6.15514, -6.0, -1.4729, -6.15514, -6.0, 0.0, -1.0, -9.0, -1.4729, -6.15514, -9.0, -8.4729, -6.15514, -9.0, -7.0, -1.0, -8.0, -1.4729, -6.15514, -9.0, -1.4729, -6.15514, -9.0, 0.0, -1.0, -6.0, -8.4729, -6.0, -1.0, -8.4729, -6.15514, -1.0, -7.0, -1.0, -1.0, -8.4729, -6.15514, -1.0, -1.4729, -6.15514, -1.0, 0.0, -1.0, -6.0, -10.0, -6.0, -6.0, -10.0, -8.0, -6.0, -9.0, -8.0, -8.0, -10.0, -8.0, -8.0, -10.0, -6.0, -8.0, -8.4729, -6.0, -8.0, -10.0, -6.0, -6.0, -10.0, -6.0, -6.0, -8.4729, -6.0)

[sub_resource id=2 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0;
uniform sampler2D texture_1;


void dir_space_convert_world_to_view(inout vec3 dir, in mat4 view_mat) {
    dir = normalize(view_mat * vec4(dir, 0.0)).xyz;
}


void euler_angle_XYZ_to_mat4(in vec3 rot, out mat4 rot_mat) {
    mat3 rx = mat3(vec3(1, 0, 0),
                   vec3(0, cos(rot.x), sin(rot.x)),
                   vec3(0, -sin(rot.x), cos(rot.x)));
    mat3 ry = mat3(vec3(cos(rot.y), 0, -sin(rot.y)),
                   vec3(0, 1, 0),
                   vec3(sin(rot.y), 0, cos(rot.y)));
    mat3 rz = mat3(vec3(cos(rot.z), sin(rot.z), 0),
                   vec3(-sin(rot.z), cos(rot.z), 0),
                   vec3(0, 0, 1));
    rot_mat = mat4(rz * ry * rx);
}


void location_to_mat4(in vec3 loc, out mat4 loc_mat) {
    loc_mat = mat4(vec4(1.0, 0.0, 0.0, 0),
                   vec4(0.0, 1.0, 0.0, 0),
                   vec4(0.0, 0.0, 1.0, 0),
                   vec4(loc, 1.0));
}


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}


void point_space_convert_view_to_model(inout vec3 pos,
        in mat4 inv_model_mat, in mat4 inv_view_mat) {
    pos = (inv_model_mat * (inv_view_mat * vec4(pos, 1.0))).xyz;
}


void scale_to_mat4(in vec3 scale, out mat4 scale_mat) {
    scale_mat = mat4(vec4(scale.x, 0.0, 0.0, 0.0),
                     vec4(0.0, scale.y, 0.0, 0.0),
                     vec4(0.0, 0.0, scale.z, 0.0),
                     vec4(0.0, 0.0, 0.0, 1.0));
}


void space_convert_yup_to_zup(inout vec3 dir) {
    dir = mat3(vec3(1, 0, 0), vec3(0, 0, 1), vec3(0, -1, 0)) * dir;
}


void space_convert_zup_to_yup(inout vec3 dir) {
    dir = mat3(vec3(1, 0, 0), vec3(0, 0, -1), vec3(0, 1, 0)) * dir;
}

void vertex () {
}

void fragment () {
	mat4 INV_MODEL_MAT = inverse(WORLD_MATRIX);
	mat4 INV_VIEW_MAT = inverse(INV_CAMERA_MATRIX);
	
	// node: 'Texture Coordinate'
	// type: 'ShaderNodeTexCoord'
	// input sockets handling
	// output sockets definitions
	vec3 node0_out0_object;
	
	node0_out0_object = VERTEX;
	point_space_convert_view_to_model(node0_out0_object, INV_MODEL_MAT,
		INV_VIEW_MAT);
	space_convert_yup_to_zup(node0_out0_object);
	
	
	// node: 'Mapping'
	// type: 'ShaderNodeMapping'
	// input sockets handling
	vec3 node1_in0_vector = node0_out0_object;
	vec3 node1_in1_location = vec3(0.0, 0.0, 0.0);
	vec3 node1_in2_rotation = vec3(0.0, 0.0, 0.0);
	vec3 node1_in3_scale = vec3(1.0, 1.0, 1.0);
	// output sockets definitions
	vec3 node1_out0_vector;
	
	// Mapping type: POINT
	mat4 node1_var0_location;
	location_to_mat4(node1_in1_location, node1_var0_location);
	mat4 node1_var1_rotation;
	euler_angle_XYZ_to_mat4(node1_in2_rotation, node1_var1_rotation);
	mat4 node1_var2_scale;
	scale_to_mat4(node1_in3_scale, node1_var2_scale);
	mat4 node1_var3_xform_mat = node1_var0_location * node1_var1_rotation *
		node1_var2_scale;
	node1_out0_vector = (node1_var3_xform_mat * vec4(node1_in0_vector, 1.0)).xyz;
	
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node2_in0_vector = node1_out0_vector;
	// output sockets definitions
	vec4 node2_out0_color;
	float node2_out1_alpha;
	
	node_tex_image(node2_in0_vector, texture_0, node2_out0_color, node2_out1_alpha);
	
	
	// node: 'Image Texture.001'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node3_in0_vector = node1_out0_vector;
	// output sockets definitions
	vec4 node3_out0_color;
	float node3_out1_alpha;
	
	node_tex_image(node3_in0_vector, texture_1, node3_out0_color, node3_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node4_in0_basecolor = node2_out0_color;
	float node4_in1_subsurface = float(0.0);
	vec3 node4_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node4_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node4_in4_metallic = float(1.0);
	float node4_in5_specular = float(1.0);
	float node4_in6_speculartint = float(0.0);
	float node4_in7_roughness = float(1.0);
	float node4_in8_anisotropic = float(0.0);
	float node4_in9_anisotropicrotation = float(0.0);
	float node4_in10_sheen = float(0.0);
	float node4_in11_sheentint = float(0.5);
	float node4_in12_clearcoat = float(0.0);
	float node4_in13_clearcoatroughness = float(0.0);
	float node4_in14_ior = float(1.4500000476837158);
	float node4_in15_transmission = float(0.0);
	float node4_in16_transmissionroughness = float(0.0);
	vec4 node4_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node4_in18_alpha = float(1.0);
	vec3 node4_in19_normal = node3_out0_color.rgb;
	vec3 node4_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node4_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node4_bsdf_out0_albedo;
	float node4_bsdf_out1_sss_strength;
	float node4_bsdf_out3_specular;
	float node4_bsdf_out2_metallic;
	float node4_bsdf_out4_roughness;
	float node4_bsdf_out5_clearcoat;
	float node4_bsdf_out6_clearcoat_gloss;
	float node4_bsdf_out7_anisotropy;
	float node4_bsdf_out8_transmission;
	float node4_bsdf_out9_ior;
	
	node_bsdf_principled(node4_in0_basecolor, node4_in1_subsurface,
		node4_in3_subsurfacecolor, node4_in4_metallic, node4_in5_specular,
		node4_in7_roughness, node4_in12_clearcoat, node4_in13_clearcoatroughness,
		node4_in8_anisotropic, node4_in15_transmission, node4_in14_ior,
		node4_bsdf_out0_albedo, node4_bsdf_out1_sss_strength, node4_bsdf_out2_metallic,
		node4_bsdf_out3_specular, node4_bsdf_out4_roughness, node4_bsdf_out5_clearcoat,
		node4_bsdf_out6_clearcoat_gloss, node4_bsdf_out7_anisotropy,
		node4_bsdf_out8_transmission, node4_bsdf_out9_ior);
	space_convert_zup_to_yup(node4_in19_normal);
	dir_space_convert_world_to_view(node4_in19_normal, INV_CAMERA_MATRIX);
	
	
	ALBEDO = node4_bsdf_out0_albedo;
	SSS_STRENGTH = node4_bsdf_out1_sss_strength;
	SPECULAR = node4_bsdf_out3_specular;
	METALLIC = node4_bsdf_out2_metallic;
	ROUGHNESS = node4_bsdf_out4_roughness;
	CLEARCOAT = node4_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node4_bsdf_out6_clearcoat_gloss;
	NORMAL = node4_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node4_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node4_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node4_bsdf_out7_anisotropy;
}
"

[sub_resource id=3 type="ShaderMaterial"]

resource_name = "NewPlaceHolder"
shader = SubResource(2)
shader_param/texture_0 = ExtResource(1)
shader_param/texture_1 = ExtResource(2)

[sub_resource id=4 type="ArrayMesh"]

resource_name = "Cube018"
surfaces/0 = {
	"material":SubResource(3),
	"primitive":4,
	"arrays":[
		Vector3Array(1.0, -1.0, -1.0, 1.0, 1.0, 0.0, 1.0, 1.0, -1.0, -1.0, -1.0, 0.0, 1.0, -1.0, 7.0, 1.0, -1.0, 0.0, -1.0, -1.0, 0.0, -1.0, 1.0, -1.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, 1.0, 1.0, -1.0, 1.0, 1.0, 0.0, -1.0, -1.0, -1.0, 1.0, -1.0, 7.0, -1.0, 1.0, 7.0, 1.0, 1.0, 7.0, 1.0, -1.0, 0.0, 1.0, 1.0, 7.0, -1.0, -6.15514, 1.4729, -1.0, -8.0, 9.0, -1.0, -6.15514, 8.4729, -1.0, 1.0, 7.0, -9.0, 1.0, 0.0, -9.0, -1.0, 7.0, -9.0, -1.0, 0.0, -8.0, 1.0, 7.0, -9.0, 1.0, 0.0, -8.0, 1.0, 0.0, -8.0, 1.0, 0.0, -9.0, -1.0, 0.0, -8.0, -1.0, 0.0, -8.0, -1.0, 7.0, -9.0, 1.0, 7.0, -8.0, 1.0, 7.0, -9.0, -8.0, 9.0, -9.0, -10.0, 2.0, -9.0, -8.0, 2.0, -1.0, -6.15514, 8.4729, -6.0, -8.0, 9.0, -6.0, -6.0, 8.4729, -9.0, -6.15514, 1.4729, -8.0, -8.0, 2.0, -8.0, -6.15514, 1.4729, -9.0, -6.15514, 8.4729, -9.0, -6.15514, 1.4729, -8.0, -10.0, 2.0, -9.0, -10.0, 9.0, -8.0, -10.0, 9.0, -9.0, -8.0, 2.0, -8.0, -10.0, 2.0, -8.0, -8.0, 2.0, -1.0, -8.0, 2.0, -1.0, -10.0, 9.0, -1.0, -8.0, 9.0, -6.0, -10.0, 9.0, -6.0, -8.0, 9.0, -8.0, -10.0, 9.0, -8.0, -8.0, 9.0, -6.0, -8.0, 2.0, -1.0, -10.0, 2.0, -1.0, -8.0, 2.0, -1.0, -10.0, 2.0, -6.0, -10.0, 9.0, -1.0, -10.0, 9.0, -6.0, -6.15514, 1.4729, -1.0, -8.0, 2.0, -1.0, -6.15514, 1.4729, -8.0, -8.0, 9.0, -6.0, -8.0, 10.0, -6.0, -8.0, 9.0, -1.0, -1.0, 7.0, -6.0, 1.0, 7.0, -1.0, 1.0, 0.0, -6.0, -1.0, 0.0, -1.0, -1.0, 0.0, -6.0, 1.0, 0.0, -8.0, -6.0, 8.4729, -9.0, -8.0, 9.0, -9.0, -6.15514, 8.4729, -9.0, -10.0, 9.0, -9.0, -8.0, 9.0, -6.0, -10.0, 2.0, -8.0, -6.15514, 1.4729, -6.0, -8.0, 2.0, -6.0, -6.15514, 1.4729, -6.0, -1.0, 7.0, -6.0, 1.0, 0.0, -6.0, 1.0, 7.0, -8.0, -1.0, 0.0, -6.0, -6.15514, 1.4729, -6.0, -1.0, 0.0, -8.0, -1.0, 7.0, -9.0, -6.15514, 8.4729, -9.0, -1.0, 7.0, -6.0, -1.0, 7.0, -8.0, -6.0, 8.4729, -8.0, -1.0, 7.0, -6.0, -1.0, 0.0, -1.0, -6.15514, 1.4729, -1.0, -1.0, 0.0, -9.0, -1.0, 0.0, -8.0, -6.15514, 1.4729, -8.0, -1.0, 0.0, -1.0, -1.0, 7.0, -6.0, -6.0, 8.4729, -6.0, -1.0, 7.0, -1.0, -1.0, 0.0, -1.0, -1.0, 7.0, -6.0, -8.0, 9.0, -6.0, -6.0, 10.0, -6.0, -6.0, 8.4729, -8.0, -6.0, 8.4729, -8.0, -8.0, 10.0, -8.0, -8.0, 9.0, -6.0, -6.0, 8.4729, -8.0, -6.0, 10.0, -8.0, -6.0, 8.4729, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 7.0, 1.0, 1.0, 7.0, -9.0, 1.0, 7.0, -9.0, 1.0, 7.0, -9.0, 1.0, 0.0, -9.0, -1.0, 7.0, -9.0, -10.0, 9.0, -1.0, -6.15514, 8.4729, -1.0, -8.0, 9.0, -6.0, -8.0, 9.0, -9.0, -8.0, 2.0, -9.0, -10.0, 2.0, -9.0, -10.0, 2.0, -1.0, -10.0, 2.0, -1.0, -10.0, 9.0, -6.0, -10.0, 2.0, -6.0, -8.0, 2.0, -8.0, -8.0, 10.0, -8.0, -6.0, 8.4729, -8.0, -8.0, 9.0, -9.0, -8.0, 9.0, -6.0, -8.0, 2.0, -8.0, -6.15514, 1.4729, -8.0, -1.0, 7.0, -8.0, -6.0, 8.4729, -9.0, -6.15514, 8.4729, -6.0, -6.0, 8.4729, -6.0, -6.15514, 1.4729, -9.0, -1.0, 0.0, -9.0, -6.15514, 1.4729, -8.0, -6.15514, 1.4729, -1.0, -1.0, 7.0, -1.0, -6.15514, 8.4729, -6.0, -6.0, 8.4729, -6.0, -8.0, 10.0, -8.0, -6.0, 10.0, -6.0, -6.0, 8.4729, -6.0, -6.0, 10.0, -8.0, -6.0, 10.0),
		Vector3Array(-1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -0.00790721, -0.254841, -0.966951, -0.00790721, -0.254841, -0.966951, -0.00790721, -0.254841, -0.966951, 0.0, 0.274721, 0.961524, 0.0, 0.274721, 0.961524, 0.0, 0.274721, 0.961524, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.274721, 0.961524, 0.0, 0.274721, 0.961524, 0.0, 0.274721, 0.961524, 0.0, 1.0, -4.76837e-07, 0.0, 1.0, -4.76837e-07, 0.0, 1.0, -4.76837e-07, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0425816, -0.274471, -0.960652, 0.0425816, -0.274471, -0.960652, 0.0425816, -0.274471, -0.960652, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.274721, 0.961524, 0.0, 0.274721, 0.961524, 0.0, 0.274721, 0.961524, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, 0.274721, 0.961524, 0.0, 0.274721, 0.961524, 0.0, 0.274721, 0.961524, 0.0, -0.274721, -0.961524, 0.0, -0.274721, -0.961524, 0.0, -0.274721, -0.961524, 0.0, -0.282574, -0.959246, 0.0, -0.282574, -0.959246, 0.0, -0.282574, -0.959246, 0.0, 0.274721, 0.961524, 0.0, 0.274721, 0.961524, 0.0, 0.274721, 0.961524, 0.0, 0.274721, 0.961524, 0.0, 0.274721, 0.961524, 0.0, 0.274721, 0.961524, 0.0, -0.282574, -0.959246, 0.0, -0.282574, -0.959246, 0.0, -0.282574, -0.959246, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 0.0, -0.274721, -0.961524, 0.0, -0.274721, -0.961524, 0.0, -0.274721, -0.961524, 0.0, 0.274721, 0.961524, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.274721, 0.961524, 0.0, 1.0, -4.76837e-07, 0.0, -0.254849, -0.966981, 0.0, -0.254849, -0.966981, 0.0, -0.254849, -0.966981, 0.0, 0.274721, 0.961524, 0.0, 0.274721, 0.961524, 0.0437966, -0.282303, -0.958325, 0.0437966, -0.282303, -0.958325, 0.0437966, -0.282303, -0.958325, 0.0, -0.282574, -0.959246, 0.0, 0.274721, 0.961524, 0.0, 0.274721, 0.961524, 0.0, 0.274721, 0.961524, 0.0, 0.274721, 0.961524, -0.00852377, -0.274711, -0.961489, -0.00852377, -0.274711, -0.961489, -0.00852377, -0.274711, -0.961489, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0),
		FloatArray(0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0),
		null, ; no Vertex Colors,
		Vector2Array(0.625, 1.0, 0.375, 0.75, 0.375, 1.0, 0.625, 0.5, 0.875, 0.5, 0.875, 0.5, 0.625, 0.5, 0.375, 0.25, 0.375, 0.5, 0.375, 0.5, 0.125, 0.25, 0.125, 0.5, 0.625, 0.25, 0.625, 0.75, 0.375, 0.5, 0.375, 0.75, 0.625, 0.75, 0.375, 0.75, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.375, 0.5, 0.375, 0.5, 0.625, 0.5, 0.625, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.375, 0.5, 0.375, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.375, 0.5, 0.375, 0.5, 0.625, 0.5, 0.625, 0.5, 0.375, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.375, 0.5, 0.375, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.25, 0.375, 0.25, 0.875, 0.25, 0.625, 0.75, 0.125, 0.5, 0.375, 0.5, 0.375, 0.5, 0.375, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5, 0.625, 0.5),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 3, 5, 4, 6, 8, 7, 9, 11, 10, 5, 3, 12, 13, 15, 14, 16, 1, 17, 18, 20, 19, 11, 9, 21, 22, 24, 23, 25, 27, 26, 28, 30, 29, 31, 33, 32, 34, 36, 35, 37, 39, 38, 40, 42, 41, 43, 44, 36, 45, 47, 46, 48, 50, 49, 51, 19, 52, 53, 55, 54, 55, 57, 56, 58, 60, 59, 61, 63, 62, 64, 66, 65, 67, 69, 68, 70, 14, 71, 72, 74, 73, 21, 9, 75, 76, 78, 77, 57, 80, 79, 81, 62, 47, 82, 84, 83, 85, 71, 33, 86, 73, 30, 87, 75, 27, 88, 90, 89, 91, 93, 92, 94, 96, 95, 97, 99, 98, 23, 24, 44, 100, 102, 101, 103, 105, 104, 106, 107, 20, 108, 110, 109, 111, 113, 112, 114, 116, 115, 0, 1, 16, 3, 4, 117, 6, 7, 118, 9, 10, 119, 5, 12, 120, 13, 14, 70, 16, 17, 121, 18, 19, 51, 11, 21, 122, 22, 23, 123, 25, 26, 124, 28, 29, 125, 31, 32, 126, 34, 35, 127, 128, 130, 129, 40, 41, 131, 43, 36, 34, 45, 46, 132, 48, 49, 133, 51, 52, 134, 53, 54, 135, 55, 56, 54, 58, 59, 136, 61, 62, 81, 64, 65, 137, 67, 68, 138, 70, 71, 85, 72, 73, 86, 21, 75, 87, 139, 141, 140, 57, 79, 56, 81, 47, 45, 42, 142, 41, 85, 33, 31, 86, 30, 28, 87, 27, 25, 88, 89, 143, 144, 146, 145, 94, 95, 147, 97, 98, 148, 23, 44, 43, 149, 151, 150, 152, 154, 153, 106, 20, 18, 108, 109, 155, 111, 112, 156, 157, 159, 158)
	],
	"morph_arrays":[]
}

[node type="Spatial" name="Scene"]

[node name="DecentPhysics" type="StaticBody" parent="."]

friction = 0.5
bounce = 0.0
transform = Transform(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, -41.0, -1.0, -5.0)
collision_layer = 1
collision_mask = 1

[node name="DecentCollision" type="CollisionShape" parent="DecentPhysics"]

transform = Transform(1.0, 0.0, 0.0, 0.0, -4.37114e-08, 1.0, 0.0, -1.0, -4.37114e-08, 0.0, 0.0, 0.0)
shape = SubResource(1)

[node name="Decent" type="MeshInstance" parent="DecentPhysics/DecentCollision"]

mesh = SubResource(4)
visible = true
transform = Transform(1.0, 0.0, 0.0, 0.0, -4.37114e-08, -1.0, 0.0, 1.0, -4.37114e-08, 0.0, 0.0, 0.0)
